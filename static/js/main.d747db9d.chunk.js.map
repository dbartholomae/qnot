{"version":3,"sources":["serviceWorker.ts","services/localStorage/index.ts","business-logic/me/meSlice.ts","business-logic/useDispatch.ts","business-logic/useSelector.ts","business-logic/me/useName.ts","business-logic/game/Status.ts","business-logic/game/Player.ts","business-logic/players/playersSlice.ts","business-logic/players/usePlayers.ts","business-logic/game/chooseWordsForPlayers.ts","business-logic/game/calculateMyPoints.ts","business-logic/game/gameSlice.ts","business-logic/me/useId.ts","business-logic/game/useDispatchWithId.ts","business-logic/game/usePlayers.ts","business-logic/players/connectToChannel.ts","business-logic/game/gameSaga.ts","business-logic/store.ts","services/channel/ChannelCreatorContext.ts","services/channel/ChannelCreatorProvider.tsx","services/channel/ablyChannelCreator.ts","Connection.tsx","views/MainView/useRandomRoomCode.ts","views/GameRoomView/getRoomPath.ts","views/MainView/RoomCodeForm.tsx","services/router/useQuery.ts","views/MainView/NameForm.tsx","components/Page.tsx","views/MainView/MainView.tsx","views/MainView/getMainPath.ts","views/GameRoomView/shared/MyWord/MyWord.tsx","business-logic/game/useMyWord.ts","views/GameRoomView/AddDescriptionView/DescriptionForm.tsx","views/GameRoomView/shared/PlayerList/PlayerListItem.tsx","views/GameRoomView/shared/PlayerList/PlayerList.tsx","views/GameRoomView/AddDescriptionView/AddDescriptionView.tsx","business-logic/game/useAddFirstDescription.ts","business-logic/game/useAddSecondDescription.ts","views/GameRoomView/AddGuessView/AddGuessView.tsx","business-logic/game/useAddFirstGuess.ts","business-logic/game/useAddSecondGuess.ts","views/GameRoomView/RoundSummaryView/PlayerSummary.tsx","views/GameRoomView/RoundSummaryView/RoundSummaryView.tsx","views/GameRoomView/WaitingRoomView/WaitingRoomView.tsx","views/GameRoomView/WaitingRoomView/convertPathToUrl.ts","views/GameRoomView/WaitingRoomView/useStartGame.tsx","views/GameRoomView/NameGuard.tsx","views/GameRoomView/useRoom.ts","views/GameRoomView/RoomGuard.tsx","views/GameRoomView/GameRoomView.tsx","business-logic/game/useStatus.ts","App.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","saveToLocalStorage","key","value","localStorage","setItem","getFromLocalStorage","getItem","initialState","id","uuid","loadOrCreateId","name","meSlice","createSlice","reducers","setName","state","action","payload","selectName","me","selectId","actions","reducer","useDispatch","useUntypedDispatch","useSelector","useUntypedSelector","useName","dispatch","newName","setNameAction","Status","Player","isOnline","word","points","descriptions","guesses","this","playersSlice","addOrUpdatePlayer","newPlayer","markPlayerOffline","undefined","selectPlayers","Object","values","players","usePlayers","chooseWordsForPlayers","wordList","numberOfPlayers","result","isEven","push","randomWordlist","sort","Math","random","numberOfWordsToAdd","i","num","QUESTION_MARK","calculateMyPoints","teamsByWords","mapObjIndexed","map","player","groupBy","getTeamsByWords","omit","filter","team","hasGuessedTeam","length","countGuessedTeams","isOtherQuestionMark","includes","flat","countGuessedQuestionMarks","flatMap","guess","countOthersGuessingMe","partner","find","otherPlayers","TypeError","guessedUs","calculateMyPointsInTeam","curry","firstPlayerId","secondPlayerId","some","connectedToChannel","status","WaitingForGameStart","gameSlice","setState","joinRoom","joinRoomComplete","leaveRoom","startGame","ChoosingFirstDescription","prepare","randomWords","index","addFirstDescriptionToPlayer","description","playerToUpdate","every","GuessingFirstTeam","addSecondDescriptionToPlayer","GuessingSecondTeam","addFirstGuessToPlayer","ChoosingSecondDescription","addSecondGuessToPlayer","forEach","GameOver","startNewRound","playersWithWords","playerWithWord","selectGameState","game","selectMyWord","selectStatus","selectConnectedToChannel","useId","useDispatchWithId","actionCreator","pointChange","presenceSaga","receivingEventsSaga","connectToChannel","handleAction","sendingEventsSaga","requestGameState","handlePresenceMessage","handleEvent","handleGameEvent","handleRequestGameState","handleSyncGameState","channel","presence","eventChannel","emitter","subscribe","unsubscribe","take","message","fork","events","call","all","meta","received","select","myId","publish","data","clientId","from","for","put","event","delay","gameSaga","enterRoomSaga","leaveRoomSaga","roomCode","getContext","createChannel","enterClient","leaveClient","createStore","sagaMiddleware","createSagaMiddleware","context","customizedMiddleware","getDefaultMiddleware","serializableCheck","thunk","store","configureStore","middleware","gameReducer","meReducer","playersReducer","run","ChannelCreatorContext","createContext","ChannelCreatorProvider","children","channelCreator","Provider","API_KEY","process","channels","Ably","Realtime","ablyChannelCreator","get","bind","Connection","basename","createRandomRoomCode","createRandomWords","join","getRoomPath","RoomCodeForm","useHistory","randomRoomCode","useState","useRandomRoomCode","roomCodeFromQuery","URLSearchParams","useLocation","search","setRoomCode","onSubmit","preventDefault","style","display","gap","TextField","autoComplete","autoFocus","label","en","MainView","roomCodeLabel","variant","InputProps","endAdornment","InputAdornment","position","Tooltip","title","generateNewRoomCode","IconButton","aria-label","onClick","Cached","readOnly","Button","type","color","createRoom","NameForm","saveName","nameDraft","setNameDraft","nameLabel","onChange","target","Page","Container","Typography","gutterBottom","flexDirection","getMainPath","MyWord","myWord","Card","CardContent","GameRoomView","myWordLabel","aria-labelledby","youReTheQuestionMark","DescriptionForm","onChoose","setDescription","descriptionChosen","setDescriptionChosen","noValidate","disabled","describeYourWord","waitingForOtherPlayers","chooseThisDescription","PlayerListItem","ListItem","ListItemIcon","Wifi","WaitingRoomView","online","WifiOff","offline","ListItemText","primary","secondary","PlayerList","Paper","List","subheader","ListSubheader","playersListHeader","AddDescriptionView","AddFirstDescriptionView","addFirstDescription","AddSecondDescriptionView","addSecondDescription","AddGuessView","setGuess","alreadyGuessed","setAlreadyGuessed","firstGuess","checked","labelId","myFirstGuess","playerId","FormControl","required","component","FormLabel","guessWhoIsInATeam","FormGroup","FormControlLabel","control","Checkbox","AddFirstGuessView","addFirstGuess","AddSecondGuessView","addSecondGuess","PlayerSummary","RoundSummaryView","words","path","startGameAction","useStartGame","Grid","container","justify","alignItems","item","text","protocol","host","copyInviteLink","needFivePlayers","NameGuard","redirectPath","to","useRoom","useEffect","connecting","RoomGuard","LinearProgress","connectingToRoom","GameRoomRouter","App","params","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.d747db9d.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === \"[::1]\" ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n            \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker.register(swUrl).then(registration => {\n    registration.onupdatefound = () => {\n      const installingWorker = registration.installing;\n      if (installingWorker == null) {\n        return;\n      }\n      installingWorker.onstatechange = () => {\n        if (installingWorker.state === \"installed\") {\n          if (navigator.serviceWorker.controller) {\n            // At this point, the updated precached content has been fetched,\n            // but the previous service worker will still serve the older\n            // content until all client tabs are closed.\n            console.log(\n              \"New content is available and will be used when all \" +\n              \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n            );\n\n            // Execute callback\n            if (config && config.onUpdate) {\n              config.onUpdate(registration);\n            }\n          } else {\n            // At this point, everything has been precached.\n            // It's the perfect time to display a\n            // \"Content is cached for offline use.\" message.\n            console.log(\"Content is cached for offline use.\");\n\n            // Execute callback\n            if (config && config.onSuccess) {\n              config.onSuccess(registration);\n            }\n          }\n        }\n      };\n    };\n  }).catch(error => {\n    console.error(\"Error during service worker registration:\", error);\n  });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" }\n  }).then(response => {\n    // Ensure service worker exists, and that we really are getting a JS file.\n    const contentType = response.headers.get(\"content-type\");\n    if (\n      response.status === 404 ||\n      (contentType != null && contentType.indexOf(\"javascript\") === -1)\n    ) {\n      // No service worker found. Probably a different app. Reload the page.\n      navigator.serviceWorker.ready.then(registration => {\n        registration.unregister().then(() => {\n          window.location.reload();\n        });\n      });\n    } else {\n      // Service worker found. Proceed as normal.\n      registerValidSW(swUrl, config);\n    }\n  }).catch(() => {\n    console.log(\n      \"No internet connection found. App is running in offline mode.\"\n    );\n  });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    }).catch(error => {\n      console.error(error.message);\n    });\n  }\n}\n","export function saveToLocalStorage(key: string, value: string): string {\n  localStorage.setItem(`qnot/${key}`, value);\n  return value;\n}\n\nexport function getFromLocalStorage(key: string): string | null {\n  return localStorage.getItem(`qnot/${key}`) ?? null;\n}\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { v4 as uuid } from \"uuid\";\nimport { RootState } from \"../store\";\nimport {\n  getFromLocalStorage,\n  saveToLocalStorage,\n} from \"../../services/localStorage\";\n\ntype MeState = {\n  id: string;\n  name: string | null;\n};\n\nfunction loadOrCreateId() {\n  return getFromLocalStorage(\"id\") ?? saveToLocalStorage(\"id\", uuid());\n}\n\nconst initialState: MeState = {\n  id: loadOrCreateId(),\n  name: getFromLocalStorage(\"name\"),\n};\n\nexport const meSlice = createSlice({\n  name: \"me\",\n  initialState,\n  reducers: {\n    setName: (state, action: PayloadAction<string>) => ({\n      ...state,\n      name: action.payload,\n    }),\n  },\n});\n\nexport const selectName = (state: RootState) => state.me.name;\nexport const selectId = (state: RootState) => state.me.id;\n\nexport const { setName } = meSlice.actions;\n\nexport const reducer = meSlice.reducer;\n","import { useDispatch as useUntypedDispatch } from \"react-redux\";\nimport { Store } from \"./store\";\n\nexport const useDispatch = () => useUntypedDispatch<Store[\"dispatch\"]>();\n","import {\n  TypedUseSelectorHook,\n  useSelector as useUntypedSelector,\n} from \"react-redux\";\nimport { RootState } from \"./store\";\n\nexport const useSelector: TypedUseSelectorHook<RootState> = useUntypedSelector;\n","import { useDispatch } from \"../useDispatch\";\nimport { selectName, setName as setNameAction } from \"./meSlice\";\nimport { useSelector } from \"../useSelector\";\nimport { saveToLocalStorage } from \"../../services/localStorage\";\n\nexport function useName() {\n  const name = useSelector(selectName);\n  const dispatch = useDispatch();\n  const setName = (newName: string) => {\n    saveToLocalStorage(\"name\", newName);\n    dispatch(setNameAction(newName));\n  };\n  return [name, setName] as const;\n}\n","export enum Status {\n  WaitingForGameStart = \"WaitingForGameStart\",\n  ChoosingFirstDescription = \"ChoosingFirstDescription\",\n  GuessingFirstTeam = \"GuessingFirstTeam\",\n  ChoosingSecondDescription = \"ChoosingSecondDescription\",\n  GuessingSecondTeam = \"GuessingSecondTeam\",\n  GameOver = \"GameOver\",\n}\n","import { v4 as uuid } from \"uuid\";\nimport { Optional } from \"utility-types\";\n\nexport type Guess = [Player[\"id\"], Player[\"id\"]];\n\nexport class Player {\n  id: string;\n  name: string;\n  isOnline: boolean;\n  word?: string | null;\n  points?: number;\n  descriptions: string[] = [];\n  guesses: Guess[] = [];\n\n  constructor({\n    id = uuid(),\n    name,\n    isOnline,\n    word,\n  }: Optional<Player, \"id\" | \"descriptions\" | \"guesses\">) {\n    this.name = name;\n    this.isOnline = isOnline;\n    this.id = id;\n    this.word = word;\n  }\n}\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { RootState } from \"../store\";\nimport { Player } from \"../game\";\n\ntype OtherPlayersState = { [id: string]: Player };\n\nconst initialState: OtherPlayersState = {};\n\nexport const playersSlice = createSlice({\n  name: \"players\",\n  initialState,\n  reducers: {\n    addOrUpdatePlayer: (\n      state,\n      { payload: newPlayer }: PayloadAction<Player>\n    ) => ({\n      ...state,\n      [newPlayer.id]: newPlayer,\n    }),\n    markPlayerOffline: (\n      state,\n      { payload: id }: PayloadAction<Player[\"id\"]>\n    ) => {\n      if (state[id] === undefined) {\n        return;\n      }\n      state[id].isOnline = false;\n    },\n  },\n});\n\nexport const { addOrUpdatePlayer, markPlayerOffline } = playersSlice.actions;\n\nexport const selectPlayers = (state: RootState): Player[] =>\n  Object.values(state.players);\n\nexport const reducer = playersSlice.reducer;\n","import { selectPlayers } from \"./playersSlice\";\nimport { useSelector } from \"../useSelector\";\n\nexport function usePlayers() {\n  return useSelector(selectPlayers);\n}\n","export function chooseWordsForPlayers(\n  wordList: string[],\n  numberOfPlayers: number\n) {\n  const result: Array<string | null> = [null];\n  if (isEven(numberOfPlayers)) {\n    result.push(null);\n  }\n\n  const randomWordlist = wordList.sort(() => Math.random() - 0.5);\n\n  const numberOfWordsToAdd = isEven(numberOfPlayers)\n    ? numberOfPlayers - 2\n    : numberOfPlayers - 1;\n  for (let i = 0; i < numberOfWordsToAdd / 2; i++) {\n    result.push(randomWordlist[i], randomWordlist[i]);\n  }\n\n  return result.sort(() => Math.random() - 0.5);\n}\n\nfunction isEven(num: number) {\n  return num % 2 === 0;\n}\n","import { curry, groupBy, mapObjIndexed, omit, values } from \"ramda\";\nimport { v4 as uuid } from \"uuid\";\nimport { Player } from \"./Player\";\n\nconst QUESTION_MARK = \"QUESTION_MARK\" + uuid();\n\nexport function calculateMyPoints(me: Player, players: Player[]) {\n  const teamsByWords = getTeamsByWords(players);\n\n  let points = 0;\n  points += 2 * countGuessedTeams(me, teamsByWords);\n  points -= countGuessedQuestionMarks(me, teamsByWords);\n\n  if (me.word === null) {\n    points += countOthersGuessingMe(me, players);\n  } else {\n    points += calculateMyPointsInTeam(me, players);\n  }\n  return points;\n}\n\nfunction getTeamsByWords(players: Player[]) {\n  return mapObjIndexed(\n    (players) => players.map((player) => player.id),\n    groupBy<Player, string>((player) => player.word ?? QUESTION_MARK, players)\n  );\n}\n\nconst hasGuessedTeam = curry(\n  (firstPlayerId: Player[\"id\"], secondPlayerId: Player[\"id\"], player: Player) =>\n    player.guesses.some(\n      (guess) => guess.includes(firstPlayerId) && guess.includes(secondPlayerId)\n    )\n);\n\nfunction countGuessedTeams(\n  me: Player,\n  teamsByWords: { [id: string]: string[] }\n) {\n  const otherTeams = values(\n    omit([QUESTION_MARK, ...(me.word ? [me.word] : [])], teamsByWords)\n  );\n  return otherTeams.filter((team) => hasGuessedTeam(team[0], team[1], me))\n    .length;\n}\n\nfunction countGuessedQuestionMarks(\n  me: Player,\n  teamsByWords: { [p: string]: string[] }\n) {\n  const isOtherQuestionMark = (id: Player[\"id\"]) =>\n    id !== me.id && teamsByWords[QUESTION_MARK].includes(id);\n  return me.guesses.flat().filter(isOtherQuestionMark).length;\n}\n\nfunction calculateMyPointsInTeam(me: Player, players: Player[]): number {\n  let points = 0;\n  const partner = players.find(\n    (player) => player.word === me.word && player.id !== me.id\n  );\n  const otherPlayers = players.filter((player) => player.word !== me.word);\n  if (partner === undefined) {\n    throw new TypeError(`Cannot find second player with word ${me.word}`);\n  }\n\n  const guessedUs = hasGuessedTeam(me.id, partner.id);\n  if (guessedUs(partner) && guessedUs(me)) {\n    points += 3;\n  }\n\n  points -= otherPlayers.filter(guessedUs).length;\n  return points;\n}\n\nfunction countOthersGuessingMe(me: Player, players: Player[]) {\n  const guessesByOtherPlayers = players\n    .filter((player) => player.id !== me.id)\n    .flatMap((player) => player.guesses);\n  return guessesByOtherPlayers.filter((guess) => guess.includes(me.id)).length;\n}\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { RootState } from \"../store\";\nimport { Guess, Player } from \"./Player\";\nimport { chooseWordsForPlayers } from \"./chooseWordsForPlayers\";\nimport { selectId } from \"../me/meSlice\";\nimport { Status } from \"./Status\";\nimport { calculateMyPoints } from \"./calculateMyPoints\";\n\nexport interface GameState {\n  connectedToChannel: boolean;\n  players: Player[];\n  status: Status;\n}\n\nconst initialState: GameState = {\n  connectedToChannel: false,\n  players: [],\n  status: Status.WaitingForGameStart,\n};\n\ninterface GameConfig {\n  players: Player[];\n  wordList: string[];\n}\n\nconst gameSlice = createSlice({\n  name: \"game\",\n  initialState: initialState,\n  reducers: {\n    setState: (state, { payload: newState }: PayloadAction<GameState>) =>\n      newState,\n    joinRoom: (state, { payload: _roomCode }: PayloadAction<string>) => state,\n    joinRoomComplete: (\n      state,\n      { payload: _roomCode }: PayloadAction<string>\n    ) => ({\n      ...state,\n      connectedToChannel: true,\n    }),\n    leaveRoom: (state) => ({ ...state, connectedToChannel: false }),\n    startGame: {\n      reducer: (state, { payload: players }: PayloadAction<Player[]>) => {\n        return {\n          ...state,\n          players: players.map((player) => ({ ...player, points: 5 })),\n          status: Status.ChoosingFirstDescription,\n        };\n      },\n      prepare: ({ players, wordList }: GameConfig) => {\n        const randomWords = chooseWordsForPlayers(wordList, players.length);\n        return {\n          payload: players.map((player, index) => ({\n            ...player,\n            word: randomWords[index],\n          })),\n        };\n      },\n    },\n    addFirstDescriptionToPlayer: (\n      state,\n      {\n        payload: { description, id },\n      }: PayloadAction<{ description: string; id: Player[\"id\"] }>\n    ) => {\n      const playerToUpdate = state.players.find((player) => player.id === id);\n      if (playerToUpdate === undefined) {\n        return;\n      }\n      playerToUpdate.descriptions[0] = description;\n      if (state.players.every((player) => player.descriptions.length === 1)) {\n        state.status = Status.GuessingFirstTeam;\n      }\n    },\n    addSecondDescriptionToPlayer: (\n      state,\n      {\n        payload: { description, id },\n      }: PayloadAction<{ description: string; id: Player[\"id\"] }>\n    ) => {\n      const playerToUpdate = state.players.find((player) => player.id === id);\n      if (playerToUpdate === undefined) {\n        return;\n      }\n      playerToUpdate.descriptions[1] = description;\n      if (state.players.every((player) => player.descriptions.length === 2)) {\n        state.status = Status.GuessingSecondTeam;\n      }\n    },\n    addFirstGuessToPlayer: (\n      state,\n      {\n        payload: { guess, id },\n      }: PayloadAction<{\n        guess: Guess;\n        id: Player[\"id\"];\n      }>\n    ) => {\n      const playerToUpdate = state.players.find((player) => player.id === id);\n      if (playerToUpdate === undefined) {\n        return;\n      }\n      playerToUpdate.guesses[0] = guess;\n      if (state.players.every((player) => player.guesses.length === 1)) {\n        state.status = Status.ChoosingSecondDescription;\n      }\n    },\n    addSecondGuessToPlayer: (\n      state,\n      {\n        payload: { guess, id },\n      }: PayloadAction<{\n        guess: Guess;\n        id: Player[\"id\"];\n      }>\n    ) => {\n      if (state.status !== Status.GuessingSecondTeam) {\n        return;\n      }\n      const playerToUpdate = state.players.find((player) => player.id === id);\n      if (playerToUpdate === undefined) {\n        return;\n      }\n      playerToUpdate.guesses[1] = guess;\n      if (state.players.every((player) => player.guesses.length === 2)) {\n        state.players.forEach(\n          (player) =>\n            (player.points! += calculateMyPoints(player, state.players))\n        );\n        state.status = Status.GameOver;\n      }\n    },\n    startNewRound: {\n      reducer: (\n        state,\n        {\n          payload: playersWithWords,\n        }: PayloadAction<Pick<Player, \"id\" | \"word\">[]>\n      ) => ({\n        ...state,\n        players: state.players.map((player) => ({\n          ...player,\n          descriptions: [],\n          guesses: [],\n          word: playersWithWords.find(\n            (playerWithWord) => playerWithWord.id === player.id\n          )!.word,\n        })),\n        status: Status.ChoosingFirstDescription,\n      }),\n      prepare: (players: Pick<Player, \"id\">[], wordList: string[]) => {\n        const randomWords = chooseWordsForPlayers(wordList, players.length);\n        return {\n          payload: players.map((player, index) => ({\n            id: player.id,\n            word: randomWords[index],\n          })),\n        };\n      },\n    },\n  },\n});\n\nexport const { reducer } = gameSlice;\n\nexport const {\n  addFirstGuessToPlayer,\n  addSecondGuessToPlayer,\n  addFirstDescriptionToPlayer,\n  addSecondDescriptionToPlayer,\n  joinRoom,\n  leaveRoom,\n  joinRoomComplete,\n  setState,\n  startGame,\n  startNewRound,\n} = gameSlice.actions;\n\nexport function selectGameState(state: RootState) {\n  return state.game;\n}\n\nexport function selectMyWord(state: RootState) {\n  return selectGameState(state).players.find(\n    (player) => player.id === selectId(state)\n  )?.word;\n}\n\nexport function selectStatus(state: RootState) {\n  return selectGameState(state).status;\n}\n\nexport function selectPlayers(state: RootState) {\n  return selectGameState(state).players;\n}\n\nexport function selectConnectedToChannel(state: RootState) {\n  return selectGameState(state).connectedToChannel;\n}\n","import { selectId } from \"./meSlice\";\nimport { useSelector } from \"../useSelector\";\n\nexport function useId() {\n  return useSelector(selectId);\n}\n","import { Player } from \"./Player\";\nimport { PayloadAction } from \"@reduxjs/toolkit\";\nimport { useId } from \"../me/useId\";\nimport { useDispatch } from \"../useDispatch\";\n\nexport function useDispatchWithId<Value>(\n  actionCreator: (id: Player[\"id\"], value: Value) => PayloadAction<unknown>\n) {\n  const id = useId();\n  const dispatch = useDispatch();\n\n  function dispatchAction(value: Value) {\n    dispatch(actionCreator(id, value));\n  }\n\n  return dispatchAction;\n}\n","import { useSelector } from \"../useSelector\";\nimport { selectPlayers } from \"./gameSlice\";\nimport { calculateMyPoints } from \"./calculateMyPoints\";\n\nexport function usePlayers() {\n  const players = useSelector(selectPlayers);\n  return players.map((player) => ({\n    ...player,\n    pointChange: calculateMyPoints(player, players),\n  }));\n}\n","import { Channel } from \"../../services/channel/Channel\";\nimport { Player } from \"../game\";\nimport { Types } from \"ably\";\nimport { addOrUpdatePlayer, markPlayerOffline } from \"./playersSlice\";\nimport { all, call, delay, fork, put, select, take } from \"redux-saga/effects\";\nimport { eventChannel } from \"redux-saga\";\nimport { Action } from \"@reduxjs/toolkit\";\nimport { selectId } from \"../me/meSlice\";\nimport { GameState, selectGameState, setState } from \"../game/gameSlice\";\n\nfunction* presenceSaga(channel: Channel) {\n  const presence = eventChannel((emitter) => {\n    const actions: Types.PresenceAction[] = [\"enter\", \"present\", \"leave\"];\n    channel.presence.subscribe(actions, emitter);\n    return () => channel.presence.unsubscribe(actions, emitter);\n  });\n  while (true) {\n    const message: Types.PresenceMessage = yield take(presence);\n    yield fork(handlePresenceMessage, message, channel);\n  }\n}\n\nfunction* receivingEventsSaga(channel: Channel) {\n  const events = eventChannel((emitter) => {\n    channel.subscribe(emitter);\n    return () => channel.unsubscribe(emitter);\n  });\n\n  while (true) {\n    const message: Types.Message = yield take(events);\n    yield call(handleEvent, message, channel);\n  }\n}\n\nexport function* connectToChannel(channel: Channel) {\n  yield all([\n    receivingEventsSaga(channel),\n    presenceSaga(channel),\n    sendingEventsSaga(channel),\n  ]);\n}\n\nexport function* handleAction(\n  action: Action<unknown> & { meta?: { received?: boolean } },\n  channel: Channel\n) {\n  if (action.meta?.received) {\n    return;\n  }\n  const myId: string = yield select(selectId);\n  channel.publish({\n    name: \"gameEvent\",\n    data: { ...action, meta: { clientId: myId } },\n  });\n}\n\nexport function* sendingEventsSaga(channel: Channel) {\n  while (true) {\n    const action: Action & { received?: boolean } = yield take();\n    yield handleAction(action, channel);\n  }\n}\n\nfunction* requestGameState(channel: Channel, message: Types.PresenceMessage) {\n  const myId: string = yield select(selectId);\n  channel.publish({\n    name: \"requestGameState\",\n    data: { from: message.clientId, for: myId },\n  });\n}\n\nexport function* handlePresenceMessage(\n  message: Types.PresenceMessage,\n  channel: Channel\n) {\n  if ([\"enter\", \"present\"].includes(message.action)) {\n    yield put({\n      ...addOrUpdatePlayer(\n        new Player({\n          id: message.clientId,\n          name: message.data.name,\n          isOnline: true,\n        })\n      ),\n      meta: {\n        received: true,\n      },\n    });\n  }\n  if ([\"present\"].includes(message.action)) {\n    yield requestGameState(channel, message);\n  }\n  if ([\"leave\"].includes(message.action)) {\n    yield put({\n      ...markPlayerOffline(message.clientId),\n      meta: {\n        received: true,\n      },\n    });\n  }\n}\n\nexport function* handleEvent(event: Types.Message, channel: Channel) {\n  switch (event.name) {\n    case \"gameEvent\":\n      yield handleGameEvent(event);\n      return;\n    case \"requestGameState\":\n      yield handleRequestGameState(event, channel);\n      return;\n    case \"syncGameState\":\n      yield handleSyncGameState(event);\n      return;\n  }\n}\n\nfunction* handleGameEvent(event: Types.Message) {\n  const myId: string = yield select(selectId);\n  const action = event.data;\n  if (action?.meta?.clientId !== myId) {\n    yield put({\n      ...action,\n      meta: {\n        ...action.meta,\n        received: true,\n      },\n    });\n  }\n}\n\nfunction* handleRequestGameState(event: Types.Message, channel: Channel) {\n  const myId: string = yield select(selectId);\n  if (event.data.from !== myId) {\n    return;\n  }\n  yield delay(500);\n  const state: GameState = yield select(selectGameState);\n  channel.publish({\n    name: \"syncGameState\",\n    data: { state, for: event.data.for },\n  });\n}\n\nfunction* handleSyncGameState(event: Types.Message) {\n  const myId: string = yield select(selectId);\n  if (event.data.for !== myId) {\n    return;\n  }\n\n  yield put({ ...setState(event.data.state), meta: { received: true } });\n}\n","import { call, fork, getContext, select, take } from \"redux-saga/effects\";\nimport { selectId, selectName } from \"../me/meSlice\";\nimport { ChannelCreator } from \"../../services/channel/ChannelCreator\";\nimport { joinRoom, joinRoomComplete, leaveRoom } from \"./gameSlice\";\nimport { Channel } from \"../../services/channel/Channel\";\nimport { connectToChannel } from \"../players/connectToChannel\";\nimport { put } from \"redux-saga-test-plan/matchers\";\n\nexport function* gameSaga() {\n  yield call(presenceSaga);\n}\n\nfunction* presenceSaga() {\n  while (true) {\n    const { payload: roomCode } = yield take(joinRoom);\n    const createChannel: ChannelCreator = yield getContext(\"createChannel\");\n    const channel = createChannel(roomCode);\n    yield fork(enterRoomSaga, channel, roomCode);\n    yield take(leaveRoom);\n    yield fork(leaveRoomSaga, channel);\n  }\n}\n\nfunction* enterRoomSaga(channel: Channel, roomCode: string) {\n  const id: string = yield select(selectId);\n  const name: string = yield select(selectName);\n  yield fork(connectToChannel, channel);\n  yield channel.presence.enterClient(id, { name });\n  yield put(joinRoomComplete(roomCode));\n}\n\nfunction* leaveRoomSaga(channel: Channel) {\n  const id: string = yield select(selectId);\n  channel.presence.leaveClient(id);\n}\n","import { configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\";\nimport { reducer as meReducer } from \"./me/\";\nimport { reducer as playersReducer } from \"./players\";\nimport { reducer as gameReducer } from \"./game\";\nimport createSagaMiddleware from \"redux-saga\";\nimport { gameSaga } from \"./game/gameSaga\";\nimport { ChannelCreator } from \"../services/channel/ChannelCreator\";\n\nexport function createStore(createChannel: ChannelCreator) {\n  const sagaMiddleware = createSagaMiddleware({ context: { createChannel } });\n\n  const customizedMiddleware = [\n    ...getDefaultMiddleware({\n      serializableCheck: false,\n      thunk: false,\n    }),\n    sagaMiddleware,\n  ];\n  const store = configureStore({\n    middleware: customizedMiddleware,\n    reducer: {\n      game: gameReducer,\n      me: meReducer,\n      players: playersReducer,\n    },\n  });\n  sagaMiddleware.run(gameSaga);\n  return store;\n}\n\nexport type Store = ReturnType<typeof createStore>;\nexport type RootState = ReturnType<Store[\"getState\"]>;\n","import { createContext } from \"react\";\nimport { ChannelCreator } from \"./ChannelCreator\";\n\nexport const ChannelCreatorContext = createContext<ChannelCreator>(\n  (undefined as unknown) as ChannelCreator\n);\n","import React, { FunctionComponent } from \"react\";\nimport { ChannelCreatorContext } from \"./ChannelCreatorContext\";\nimport { ChannelCreator } from \"./ChannelCreator\";\n\ninterface Props {\n  channelCreator: ChannelCreator;\n}\n\nexport const ChannelCreatorProvider: FunctionComponent<Props> = ({\n  children,\n  channelCreator,\n}) => (\n  <ChannelCreatorContext.Provider value={channelCreator}>\n    {children}\n  </ChannelCreatorContext.Provider>\n);\n","import Ably from \"ably/promises\";\nimport { ChannelCreator } from \"./ChannelCreator\";\n\nconst API_KEY: unknown = process.env.REACT_APP_ABLY_API_KEY;\n\nif (typeof API_KEY !== \"string\" || API_KEY === \"\") {\n  throw new TypeError(\"No Ably API key set in env var REACT_APP_ABLY_API_KEY\");\n}\n\nconst channels = new Ably.Realtime(API_KEY).channels;\nexport const ablyChannelCreator: ChannelCreator = channels.get.bind(channels);\n","import { BrowserRouter } from \"./services/router\";\nimport { Provider } from \"react-redux\";\nimport { createStore } from \"./business-logic/store\";\nimport React, { ReactNode } from \"react\";\nimport { ChannelCreatorProvider } from \"./services/channel/ChannelCreatorProvider\";\nimport { ablyChannelCreator } from \"./services/channel/ablyChannelCreator\";\n\ninterface Props {\n  children: ReactNode;\n}\n\nexport const Connection = ({ children }: Props) => (\n  <ChannelCreatorProvider channelCreator={ablyChannelCreator}>\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n      <Provider store={createStore(ablyChannelCreator)}>{children}</Provider>\n    </BrowserRouter>\n  </ChannelCreatorProvider>\n);\n","import { useState } from \"react\";\nimport createRandomWords from \"random-words\";\n\nexport function createRandomRoomCode() {\n  return (createRandomWords(3) as string[]).join(\"-\");\n}\n\nexport function useRandomRoomCode() {\n  const [roomCode] = useState(() => createRandomRoomCode());\n  return roomCode;\n}\n","export function getRoomPath(roomCode: string) {\n  return `/room/${roomCode}`;\n}\n","import { createRandomRoomCode, useRandomRoomCode } from \"./useRandomRoomCode\";\nimport { useHistory, useQuery } from \"../../services/router\";\nimport { getRoomPath } from \"../GameRoomView/getRoomPath\";\nimport { en } from \"../../services/locale\";\nimport React, { useState } from \"react\";\nimport {\n  Button,\n  IconButton,\n  InputAdornment,\n  TextField,\n  Tooltip,\n} from \"@material-ui/core\";\nimport { Cached } from \"@material-ui/icons\";\n\nexport function RoomCodeForm() {\n  const { push } = useHistory();\n  const randomRoomCode = useRandomRoomCode();\n  const query = useQuery();\n\n  const roomCodeFromQuery = query.get(\"roomCode\");\n  const [roomCode, setRoomCode] = useState(roomCodeFromQuery ?? randomRoomCode);\n\n  return (\n    <form\n      onSubmit={(event) => {\n        event.preventDefault();\n        push(getRoomPath(roomCode));\n      }}\n      style={{\n        display: \"flex\",\n        gap: 12,\n      }}\n    >\n      <TextField\n        autoComplete=\"off\"\n        autoFocus\n        id={\"roomCode\"}\n        label={en.MainView.roomCodeLabel}\n        value={roomCode}\n        variant=\"standard\"\n        InputProps={{\n          endAdornment: (\n            <InputAdornment position=\"end\">\n              <Tooltip title={en.MainView.generateNewRoomCode}>\n                <IconButton\n                  aria-label={en.MainView.generateNewRoomCode}\n                  onClick={() => setRoomCode(createRandomRoomCode())}\n                >\n                  <Cached />\n                </IconButton>\n              </Tooltip>\n            </InputAdornment>\n          ),\n          readOnly: true,\n        }}\n      />\n      <Button type=\"submit\" variant=\"contained\" color=\"primary\">\n        {roomCodeFromQuery ? en.MainView.joinRoom : en.MainView.createRoom}\n      </Button>\n    </form>\n  );\n}\n","import { useLocation } from \"react-router-dom\";\n\nexport function useQuery() {\n  return new URLSearchParams(useLocation().search);\n}\n","import { en } from \"../../services/locale\";\nimport React, { useState } from \"react\";\nimport { useName } from \"../../business-logic/me\";\nimport { Button, TextField } from \"@material-ui/core\";\n\nexport function NameForm() {\n  const [name, saveName] = useName();\n  const [nameDraft, setNameDraft] = useState(name ?? \"\");\n  return (\n    <form\n      onSubmit={(event) => {\n        event.preventDefault();\n        saveName(nameDraft);\n      }}\n      style={{\n        display: \"flex\",\n        gap: 12,\n      }}\n    >\n      <TextField\n        autoComplete=\"off\"\n        id={\"name\"}\n        label={en.MainView.nameLabel}\n        value={nameDraft}\n        variant=\"filled\"\n        onChange={(event) => setNameDraft(event.target.value)}\n      />\n      <Button type=\"submit\" variant=\"contained\" color=\"primary\">\n        {en.MainView.saveName}\n      </Button>\n    </form>\n  );\n}\n","import React, { FunctionComponent } from \"react\";\nimport { Container, Typography } from \"@material-ui/core\";\n\ninterface Props {\n  title?: string;\n}\n\nexport const Page: FunctionComponent<Props> = ({ children, title }) => (\n  <Container>\n    {title && (\n      <Typography variant=\"h3\" gutterBottom>\n        {title}\n      </Typography>\n    )}\n    <div\n      style={{\n        display: \"flex\",\n        flexDirection: \"column\",\n        gap: 12,\n      }}\n    >\n      {children}\n    </div>\n  </Container>\n);\n","import React from \"react\";\nimport { RoomCodeForm } from \"./RoomCodeForm\";\nimport { NameForm } from \"./NameForm\";\nimport { useName } from \"../../business-logic/me\";\nimport { Page } from \"../../components/Page\";\nimport { en } from \"../../services/locale\";\n\nexport function MainView() {\n  const [name] = useName();\n  return (\n    <Page title={en.MainView.title}>\n      <NameForm />\n      {name && <RoomCodeForm />}\n    </Page>\n  );\n}\n","export function getMainPath(roomCode?: string) {\n  if (roomCode === undefined) {\n    return \"/\";\n  }\n  return `/?roomCode=${roomCode}`;\n}\n","import { Card, CardContent, Typography } from \"@material-ui/core\";\nimport { en } from \"../../../../services/locale\";\nimport React from \"react\";\nimport { useMyWord } from \"../../../../business-logic/game\";\n\nexport function MyWord() {\n  const myWord = useMyWord();\n\n  const id = \"my-word-label\";\n  return (\n    <Card>\n      <CardContent>\n        <Typography gutterBottom id={id}>\n          {en.GameRoomView.myWordLabel}\n        </Typography>\n        <Typography aria-labelledby={id}>\n          {myWord ?? en.GameRoomView.youReTheQuestionMark}\n        </Typography>\n      </CardContent>\n    </Card>\n  );\n}\n","import { useSelector } from \"../useSelector\";\nimport { selectMyWord } from \"./gameSlice\";\n\nexport function useMyWord() {\n  return useSelector(selectMyWord);\n}\n","import React, { useState } from \"react\";\nimport { Button, TextField } from \"@material-ui/core\";\nimport { en } from \"../../../services/locale\";\n\nexport interface Props {\n  onChoose: (description: string) => void;\n}\n\nexport function DescriptionForm({ onChoose }: Props) {\n  const [description, setDescription] = useState(\"\");\n  const [descriptionChosen, setDescriptionChosen] = useState(false);\n  return (\n    <form\n      noValidate\n      onSubmit={(event) => {\n        event.preventDefault();\n        onChoose(description);\n        setDescriptionChosen(true);\n      }}\n      style={{\n        display: \"flex\",\n        gap: 12,\n      }}\n    >\n      <TextField\n        disabled={descriptionChosen}\n        id=\"description\"\n        label={en.GameRoomView.describeYourWord}\n        value={description}\n        variant=\"filled\"\n        onChange={(event) => setDescription(event.target.value)}\n      />\n      <Button\n        disabled={descriptionChosen}\n        type=\"submit\"\n        variant=\"contained\"\n        color=\"primary\"\n      >\n        {descriptionChosen\n          ? en.GameRoomView.waitingForOtherPlayers\n          : en.GameRoomView.chooseThisDescription}\n      </Button>\n    </form>\n  );\n}\n","import { ListItem, ListItemIcon, ListItemText } from \"@material-ui/core\";\nimport { Wifi, WifiOff } from \"@material-ui/icons\";\nimport { en } from \"../../../../services/locale\";\nimport React, { FunctionComponent } from \"react\";\nimport { Player } from \"../../../../business-logic/game\";\n\ninterface Props {\n  player: Player;\n}\n\nexport const PlayerListItem: FunctionComponent<Props> = ({\n  player: { descriptions, name, isOnline },\n}) => {\n  return (\n    <ListItem>\n      <ListItemIcon>\n        {isOnline ? (\n          <Wifi aria-label={en.WaitingRoomView.online} />\n        ) : (\n          <WifiOff aria-label={en.WaitingRoomView.offline} color=\"error\" />\n        )}\n      </ListItemIcon>\n      <ListItemText\n        primary={name}\n        secondary={descriptions.length > 0 && descriptions.join(\", \")}\n      />\n    </ListItem>\n  );\n};\n","import { Player } from \"../../../../business-logic/game\";\nimport { List, ListSubheader, Paper } from \"@material-ui/core\";\nimport { en } from \"../../../../services/locale\";\nimport { PlayerListItem } from \"./PlayerListItem\";\nimport React from \"react\";\n\nexport interface Props {\n  players: Player[];\n}\n\nexport function PlayerList({ players }: Props) {\n  return (\n    <Paper>\n      <List\n        subheader={\n          <ListSubheader>{en.WaitingRoomView.playersListHeader}</ListSubheader>\n        }\n      >\n        {players.map((player) => (\n          <PlayerListItem key={player.name} player={player} />\n        ))}\n      </List>\n    </Paper>\n  );\n}\n","import React from \"react\";\nimport {\n  useAddFirstDescription,\n  useAddSecondDescription,\n  usePlayers,\n} from \"../../../business-logic/game\";\nimport { MyWord } from \"../shared/MyWord/MyWord\";\nimport { DescriptionForm } from \"./DescriptionForm\";\nimport { PlayerList } from \"../shared/PlayerList/PlayerList\";\nimport { en } from \"../../../services/locale\";\nimport { Page } from \"../../../components/Page\";\n\nexport interface Props {\n  onChoose: (description: string) => void;\n}\n\nexport function AddDescriptionView({ onChoose }: Props) {\n  const players = usePlayers();\n  return (\n    <Page title={en.GameRoomView.title}>\n      <PlayerList players={players} />\n      <MyWord />\n      <DescriptionForm onChoose={onChoose} />\n    </Page>\n  );\n}\n\nexport function AddFirstDescriptionView() {\n  const addFirstDescription = useAddFirstDescription();\n  return <AddDescriptionView onChoose={addFirstDescription} />;\n}\n\nexport function AddSecondDescriptionView() {\n  const addSecondDescription = useAddSecondDescription();\n  return <AddDescriptionView onChoose={addSecondDescription} />;\n}\n","import { addFirstDescriptionToPlayer } from \"./gameSlice\";\nimport { useDispatchWithId } from \"./useDispatchWithId\";\n\nexport function useAddFirstDescription() {\n  return useDispatchWithId((id, description: string) =>\n    addFirstDescriptionToPlayer({ description, id })\n  );\n}\n","import { addSecondDescriptionToPlayer } from \"./gameSlice\";\nimport { useDispatchWithId } from \"./useDispatchWithId\";\n\nexport function useAddSecondDescription() {\n  return useDispatchWithId((id, description: string) =>\n    addSecondDescriptionToPlayer({ description, id })\n  );\n}\n","import React, { ChangeEvent, useState } from \"react\";\nimport {\n  Button,\n  Card,\n  CardContent,\n  Checkbox,\n  FormControl,\n  FormControlLabel,\n  FormGroup,\n  FormLabel,\n  Typography,\n} from \"@material-ui/core\";\nimport {\n  Guess,\n  Player,\n  useAddFirstGuess,\n  useAddSecondGuess,\n  usePlayers,\n} from \"../../../business-logic/game\";\nimport { MyWord } from \"../shared/MyWord/MyWord\";\nimport { PlayerList } from \"../shared/PlayerList/PlayerList\";\nimport { en } from \"../../../services/locale\";\nimport { Page } from \"../../../components/Page\";\nimport { useId } from \"../../../business-logic/me/useId\";\n\nexport function AddGuessView({\n  onChoose,\n}: {\n  onChoose: (guess: Guess) => void;\n}) {\n  const [guess, setGuess] = useState<Player[\"id\"][]>([]);\n  const [alreadyGuessed, setAlreadyGuessed] = useState(false);\n  const players = usePlayers();\n  const id = useId();\n  const firstGuess: Guess | undefined = players.find(\n    (player) => player.id === id\n  )!.guesses[0];\n  const onChange = (event: ChangeEvent<HTMLInputElement>, checked: boolean) =>\n    checked\n      ? setGuess((guess) => [...guess, event.target.name])\n      : setGuess((guess) => guess.filter((id) => id !== event.target.name));\n  const labelId = \"my-first-guess-label\";\n  return (\n    <Page title={en.GameRoomView.title}>\n      <PlayerList players={players} />\n      <MyWord />\n      {firstGuess && (\n        <Card>\n          <CardContent>\n            <Typography gutterBottom id={labelId}>\n              {en.GameRoomView.myFirstGuess}\n            </Typography>\n            <Typography aria-labelledby={labelId}>\n              {firstGuess\n                .map(\n                  (playerId) =>\n                    players.find((player) => player.id === playerId)!.name\n                )\n                .join(\", \")}\n            </Typography>\n          </CardContent>\n        </Card>\n      )}\n      <form\n        noValidate\n        onSubmit={(event) => {\n          event.preventDefault();\n          if (guess.length !== 2) return;\n          onChoose(guess as Guess);\n          setAlreadyGuessed(true);\n        }}\n        style={{ display: \"flex\", flexDirection: \"column\" }}\n      >\n        <FormControl required component=\"fieldset\">\n          <FormLabel component=\"legend\">\n            {en.GameRoomView.guessWhoIsInATeam}\n          </FormLabel>\n          <FormGroup>\n            {players.map((player) => (\n              <FormControlLabel\n                control={\n                  <Checkbox\n                    checked={guess.includes(player.id)}\n                    disabled={alreadyGuessed}\n                    onChange={onChange}\n                    name={player.id}\n                  />\n                }\n                key={player.id}\n                label={player.name}\n              />\n            ))}\n          </FormGroup>\n        </FormControl>\n        <Button\n          type=\"submit\"\n          disabled={guess.length !== 2 || alreadyGuessed}\n          variant=\"contained\"\n          color=\"primary\"\n        >\n          {alreadyGuessed\n            ? en.GameRoomView.waitingForOtherPlayers\n            : en.GameRoomView.guess}\n        </Button>\n      </form>\n    </Page>\n  );\n}\n\nexport function AddFirstGuessView() {\n  const addFirstGuess = useAddFirstGuess();\n  return <AddGuessView onChoose={addFirstGuess} />;\n}\n\nexport function AddSecondGuessView() {\n  const addSecondGuess = useAddSecondGuess();\n  return <AddGuessView onChoose={addSecondGuess} />;\n}\n","import { Guess } from \"./Player\";\nimport { addFirstGuessToPlayer } from \"./gameSlice\";\nimport { useDispatchWithId } from \"./useDispatchWithId\";\n\nexport function useAddFirstGuess() {\n  return useDispatchWithId((id, guess: Guess) =>\n    addFirstGuessToPlayer({ guess, id })\n  );\n}\n","import { Guess } from \"./Player\";\nimport { addSecondGuessToPlayer } from \"./gameSlice\";\nimport { useDispatchWithId } from \"./useDispatchWithId\";\n\nexport function useAddSecondGuess() {\n  return useDispatchWithId((id, guess: Guess) =>\n    addSecondGuessToPlayer({ guess, id })\n  );\n}\n","import React, { FunctionComponent } from \"react\";\nimport { Player } from \"../../../business-logic/game\";\nimport { Card, CardContent, Typography } from \"@material-ui/core\";\n\nexport interface Props {\n  player: Player & { pointChange: number };\n  players: Pick<Player, \"id\" | \"name\">[];\n}\n\nexport const PlayerSummary: FunctionComponent<Props> = ({\n  player,\n  players,\n}) => (\n  <Card>\n    <CardContent>\n      <Typography gutterBottom variant=\"h3\">\n        {player.name}\n      </Typography>\n      <dl>\n        <dt>Wort</dt>\n        <dd>{player.word === null ? \"Fragezeichen\" : player.word}</dd>\n\n        <dt>Beschreibungen</dt>\n        <dd>{player.descriptions.join(\", \")}</dd>\n\n        <dt>Erste Vermutung</dt>\n        <dd>\n          {player.guesses[0]\n            .map((id) => players.find((player) => player.id === id)!.name)\n            .join(\", \")}\n        </dd>\n\n        <dt>Zweite Vermutung</dt>\n        <dd>\n          {player.guesses[1]\n            .map((id) => players.find((player) => player.id === id)!.name)\n            .join(\", \")}\n        </dd>\n\n        <dt>Punkte</dt>\n        <dd>\n          {player.points} ({player.pointChange > 0 ? \"+\" : \"\"}\n          {player.pointChange})\n        </dd>\n      </dl>\n    </CardContent>\n  </Card>\n);\n","import React, { FunctionComponent } from \"react\";\nimport { usePlayers } from \"../../../business-logic/game\";\nimport { MyWord } from \"../shared/MyWord/MyWord\";\nimport { en } from \"../../../services/locale\";\nimport { Page } from \"../../../components/Page\";\nimport { PlayerSummary } from \"./PlayerSummary\";\nimport { Button } from \"@material-ui/core\";\nimport { useDispatch } from \"../../../business-logic/useDispatch\";\nimport { startNewRound } from \"../../../business-logic/game/gameSlice\";\nimport words from \"../../../wordLists/german.json\";\n\nexport const RoundSummaryView: FunctionComponent = () => {\n  const players = usePlayers();\n  const dispatch = useDispatch();\n  const startNextRound = () => dispatch(startNewRound(players, words));\n  return (\n    <Page title={en.GameRoomView.title}>\n      <MyWord />\n      {players.map((player) => (\n        <PlayerSummary player={player} players={players} />\n      ))}\n\n      <Button variant=\"contained\" color=\"primary\" onClick={startNextRound}>\n        Nächste Runde\n      </Button>\n    </Page>\n  );\n};\n","import React, { FunctionComponent } from \"react\";\nimport { Button, Grid, Typography } from \"@material-ui/core\";\nimport { CopyToClipboard } from \"react-copy-to-clipboard\";\nimport { en } from \"../../../services/locale\";\nimport { usePlayers } from \"../../../business-logic/players\";\nimport { convertPathToUrl } from \"./convertPathToUrl\";\nimport { useStartGame } from \"./useStartGame\";\nimport { PlayerList } from \"../shared/PlayerList/PlayerList\";\nimport { Page } from \"../../../components/Page\";\nimport { getRoomPath } from \"../getRoomPath\";\n\ninterface Props {\n  roomCode: string;\n}\n\nexport const WaitingRoomView: FunctionComponent<Props> = ({ roomCode }) => {\n  const startGame = useStartGame();\n\n  const players = usePlayers();\n  return (\n    <Page>\n      <Grid container justify=\"space-between\" alignItems=\"center\">\n        <Grid item>\n          <Typography variant=\"h3\" gutterBottom>\n            {en.WaitingRoomView.title}\n          </Typography>\n        </Grid>\n        <Grid item>\n          <CopyToClipboard text={convertPathToUrl(getRoomPath(roomCode))}>\n            <Button variant=\"contained\" color=\"primary\">\n              {en.WaitingRoomView.copyInviteLink}\n            </Button>\n          </CopyToClipboard>\n        </Grid>\n      </Grid>\n      <PlayerList players={players} />\n      <Button\n        onClick={startGame}\n        variant=\"contained\"\n        color=\"primary\"\n        disabled={players.length < 5}\n      >\n        {players.length < 5\n          ? en.WaitingRoomView.needFivePlayers\n          : en.WaitingRoomView.startGame}\n      </Button>\n    </Page>\n  );\n};\n","export function convertPathToUrl(path: string) {\n  return `${window.location.protocol}//${window.location.host}${process.env.PUBLIC_URL}${path}`;\n}\n","import { usePlayers } from \"../../../business-logic/players\";\nimport { useDispatch } from \"../../../business-logic/useDispatch\";\nimport { startGame as startGameAction } from \"../../../business-logic/game/gameSlice\";\nimport words from \"../../../wordLists/german.json\";\n\nexport function useStartGame() {\n  const players = usePlayers();\n  const dispatch = useDispatch();\n\n  return function startGame() {\n    dispatch(\n      startGameAction({\n        players,\n        wordList: words,\n      })\n    );\n  };\n}\n","import { useName } from \"../../business-logic/me\";\nimport { Redirect } from \"../../services/router\";\nimport React, { ReactNode } from \"react\";\n\ninterface Props {\n  children?: ReactNode;\n  redirectPath: string;\n}\n\nexport function NameGuard({ children, redirectPath }: Props) {\n  const [myName] = useName();\n\n  if (myName === null) {\n    return <Redirect to={redirectPath} />;\n  }\n\n  return <>{children}</>;\n}\n","import { useEffect } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport {\n  joinRoom,\n  leaveRoom,\n  selectConnectedToChannel,\n} from \"../../business-logic/game/gameSlice\";\nimport { useSelector } from \"../../business-logic/useSelector\";\n\nexport function useRoom(roomCode: string) {\n  const dispatch = useDispatch();\n  const connectedToChannel = useSelector(selectConnectedToChannel);\n  useEffect(() => {\n    dispatch(joinRoom(roomCode));\n    return () => {\n      dispatch(leaveRoom());\n    };\n  }, [dispatch, roomCode]);\n\n  return { connecting: !connectedToChannel };\n}\n","import React, { ReactNode } from \"react\";\nimport { useRoom } from \"./useRoom\";\nimport { LinearProgress, Typography } from \"@material-ui/core\";\nimport { en } from \"../../services/locale\";\nimport { Page } from \"../../components/Page\";\n\ninterface Props {\n  children?: ReactNode;\n  roomCode: string;\n}\n\nexport function RoomGuard({ children, roomCode }: Props) {\n  const { connecting } = useRoom(roomCode);\n  if (connecting)\n    return (\n      <Page>\n        <LinearProgress />\n        <Typography>{en.WaitingRoomView.connectingToRoom}</Typography>\n      </Page>\n    );\n  return <>{children}</>;\n}\n","import React, { FunctionComponent } from \"react\";\nimport { Status, useStatus } from \"../../business-logic/game\";\nimport {\n  AddFirstDescriptionView,\n  AddSecondDescriptionView,\n} from \"./AddDescriptionView/AddDescriptionView\";\nimport {\n  AddFirstGuessView,\n  AddSecondGuessView,\n} from \"./AddGuessView/AddGuessView\";\nimport { RoundSummaryView } from \"./RoundSummaryView/RoundSummaryView\";\nimport { WaitingRoomView } from \"./WaitingRoomView/WaitingRoomView\";\nimport { NameGuard } from \"./NameGuard\";\nimport { getMainPath } from \"../MainView/getMainPath\";\nimport { useRoom } from \"./useRoom\";\nimport { RoomGuard } from \"./RoomGuard\";\n\ninterface Props {\n  roomCode: string;\n}\n\nexport const GameRoomView: FunctionComponent<Props> = ({ roomCode }: Props) => {\n  return (\n    <NameGuard redirectPath={getMainPath(roomCode)}>\n      <RoomGuard roomCode={roomCode}>\n        <GameRoomRouter roomCode={roomCode} />\n      </RoomGuard>\n    </NameGuard>\n  );\n};\n\nfunction GameRoomRouter({ roomCode }: Props) {\n  useRoom(roomCode);\n  const status = useStatus();\n\n  switch (status) {\n    case Status.WaitingForGameStart:\n      return <WaitingRoomView roomCode={roomCode} />;\n    case Status.ChoosingFirstDescription:\n      return <AddFirstDescriptionView />;\n    case Status.GuessingFirstTeam:\n      return <AddFirstGuessView />;\n    case Status.ChoosingSecondDescription:\n      return <AddSecondDescriptionView />;\n    case Status.GuessingSecondTeam:\n      return <AddSecondGuessView />;\n    case Status.GameOver:\n      return <RoundSummaryView />;\n  }\n}\n","import { useSelector } from \"../useSelector\";\nimport { selectStatus } from \"./gameSlice\";\n\nexport function useStatus() {\n  return useSelector(selectStatus);\n}\n","import React from \"react\";\nimport { MainView } from \"./views/MainView/MainView\";\nimport \"fontsource-roboto\";\nimport { Route, Switch } from \"./services/router\";\nimport { getRoomPath } from \"./views/GameRoomView/getRoomPath\";\nimport { getMainPath } from \"./views/MainView/getMainPath\";\nimport { GameRoomView } from \"./views/GameRoomView/GameRoomView\";\n\nexport function App() {\n  return (\n    <Switch>\n      <Route path={getRoomPath(\":roomCode\")}>\n        {({ match }) => <GameRoomView roomCode={match!.params.roomCode!} />}\n      </Route>\n      <Route path={getMainPath()}>\n        <MainView />\n      </Route>\n    </Switch>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Connection } from \"./Connection\";\nimport { App } from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Connection>\n      <App />\n    </Connection>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}