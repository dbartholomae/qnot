{"version":3,"sources":["serviceWorker.ts","localStorage/index.ts","me/meSlice.ts","store/useDispatch.ts","store/useSelector.ts","me/useName.ts","players/Player.ts","players/playersSlice.ts","roomSettings/roomSettingsSlice.ts","MainView/useRandomRoomCode.ts","RoomView/getRoomPath.ts","MainView/RoomCodeForm.tsx","router/useQuery.ts","MainView/NameForm.tsx","MainView/MainView.tsx","MainView/getMainPath.ts","JoinRoomView/JoinRoomView.tsx","JoinRoomView/getInvitePath.ts","RoomView/PlayerListItem.tsx","channel/ChannelCreatorContext.ts","players/useConnectionToChannel.ts","players/connectToChannel.ts","RoomView/RoomView.tsx","RoomView/convertPathToUrl.ts","me/useId.ts","players/usePlayers.ts","channel/useChannelCreator.ts","RoomView/RoomNameGuard.tsx","App.tsx","channel/ChannelCreatorProvider.tsx","channel/ablyChannelCreator.ts","ConnectedApp.tsx","store/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","saveToLocalStorage","key","value","localStorage","setItem","getFromLocalStorage","getItem","initialState","id","uuid","loadOrCreateId","name","meSlice","createSlice","reducers","setName","state","action","payload","selectName","me","selectId","actions","reducer","useDispatch","useUntypedDispatch","useSelector","useUntypedSelector","useName","dispatch","newName","setNameAction","Player","isOnline","this","playersSlice","addOrUpdatePlayer","newPlayer","markPlayerOffline","undefined","selectPlayers","Object","values","players","roomSettingsSlice","isHost","setHost","selectIsHost","roomSettings","selectRoomSettings","createRandomRoomCode","createRandomWords","join","getRoomPath","roomCode","RoomCodeForm","push","useHistory","randomRoomCode","useState","useRandomRoomCode","query","URLSearchParams","useLocation","search","roomCodeFromQuery","get","setRoomCode","onSubmit","event","preventDefault","style","display","gap","TextField","autoComplete","autoFocus","label","en","MainView","roomCodeLabel","variant","InputProps","endAdornment","InputAdornment","position","Tooltip","title","generateNewRoomCode","IconButton","aria-label","onClick","Cached","readOnly","Button","type","color","createRoom","NameForm","saveName","nameDraft","setNameDraft","nameLabel","onChange","target","Container","Typography","gutterBottom","flexDirection","getMainPath","locale","JoinRoomView","heading","alignItems","component","Link","to","joinGame","getInvitePath","PlayerListItem","player","ListItem","ListItemIcon","Wifi","RoomView","online","WifiOff","offline","ListItemText","primary","ListItemSecondaryAction","host","Home","ChannelCreatorContext","createContext","useConnectionToChannel","channel","store","useStore","useEffect","newPlayerListener","message","clientId","data","presence","subscribe","connectToChannel","path","myId","myName","channelCreator","useContext","enterClient","leaveClient","Grid","container","justify","item","text","protocol","process","copyInviteLink","Paper","List","subheader","ListSubheader","playersListHeader","map","RoomNameGuard","App","params","ChannelCreatorProvider","children","Provider","API_KEY","channels","Ably","Realtime","ablyChannelCreator","bind","ConnectedApp","basename","configureStore","meReducer","playersReducer","roomSettingsReducer","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.b86647a8.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === \"[::1]\" ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n            \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker.register(swUrl).then(registration => {\n    registration.onupdatefound = () => {\n      const installingWorker = registration.installing;\n      if (installingWorker == null) {\n        return;\n      }\n      installingWorker.onstatechange = () => {\n        if (installingWorker.state === \"installed\") {\n          if (navigator.serviceWorker.controller) {\n            // At this point, the updated precached content has been fetched,\n            // but the previous service worker will still serve the older\n            // content until all client tabs are closed.\n            console.log(\n              \"New content is available and will be used when all \" +\n              \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n            );\n\n            // Execute callback\n            if (config && config.onUpdate) {\n              config.onUpdate(registration);\n            }\n          } else {\n            // At this point, everything has been precached.\n            // It's the perfect time to display a\n            // \"Content is cached for offline use.\" message.\n            console.log(\"Content is cached for offline use.\");\n\n            // Execute callback\n            if (config && config.onSuccess) {\n              config.onSuccess(registration);\n            }\n          }\n        }\n      };\n    };\n  }).catch(error => {\n    console.error(\"Error during service worker registration:\", error);\n  });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" }\n  }).then(response => {\n    // Ensure service worker exists, and that we really are getting a JS file.\n    const contentType = response.headers.get(\"content-type\");\n    if (\n      response.status === 404 ||\n      (contentType != null && contentType.indexOf(\"javascript\") === -1)\n    ) {\n      // No service worker found. Probably a different app. Reload the page.\n      navigator.serviceWorker.ready.then(registration => {\n        registration.unregister().then(() => {\n          window.location.reload();\n        });\n      });\n    } else {\n      // Service worker found. Proceed as normal.\n      registerValidSW(swUrl, config);\n    }\n  }).catch(() => {\n    console.log(\n      \"No internet connection found. App is running in offline mode.\"\n    );\n  });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    }).catch(error => {\n      console.error(error.message);\n    });\n  }\n}\n","export function saveToLocalStorage(key: string, value: string): string {\n  localStorage.setItem(`qnot/${key}`, value);\n  return value;\n}\n\nexport function getFromLocalStorage(key: string): string | null {\n  return localStorage.getItem(`qnot/${key}`) ?? null;\n}\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { v4 as uuid } from \"uuid\";\nimport { RootState } from \"../store/store\";\nimport { getFromLocalStorage, saveToLocalStorage } from \"../localStorage\";\n\ntype MeState = {\n  id: string;\n  name: string | null;\n};\n\nfunction loadOrCreateId() {\n  return getFromLocalStorage(\"id\") ?? saveToLocalStorage(\"id\", uuid());\n}\n\nconst initialState: MeState = {\n  id: loadOrCreateId(),\n  name: getFromLocalStorage(\"name\"),\n};\n\nexport const meSlice = createSlice({\n  name: \"me\",\n  initialState,\n  reducers: {\n    setName: (state, action: PayloadAction<string>) => ({\n      ...state,\n      name: action.payload,\n    }),\n  },\n});\n\nexport const selectName = (state: RootState) => state.me.name;\nexport const selectId = (state: RootState) => state.me.id;\n\nexport const { setName } = meSlice.actions;\n\nexport const reducer = meSlice.reducer;\n","import { useDispatch as useUntypedDispatch } from \"react-redux\";\nimport { Store } from \"./store\";\n\nexport const useDispatch = () => useUntypedDispatch<Store[\"dispatch\"]>();\n","import {\n  TypedUseSelectorHook,\n  useSelector as useUntypedSelector,\n} from \"react-redux\";\nimport { RootState } from \"./store\";\n\nexport const useSelector: TypedUseSelectorHook<RootState> = useUntypedSelector;\n","import { useDispatch } from \"../store/useDispatch\";\nimport { selectName, setName as setNameAction } from \"./meSlice\";\nimport { useSelector } from \"../store/useSelector\";\nimport { saveToLocalStorage } from \"../localStorage\";\n\nexport function useName() {\n  const name = useSelector(selectName);\n  const dispatch = useDispatch();\n  const setName = (newName: string) => {\n    saveToLocalStorage(\"name\", newName);\n    dispatch(setNameAction(newName));\n  };\n  return [name, setName] as const;\n}\n","import { v4 as uuid } from \"uuid\";\nimport { Optional } from \"utility-types\";\n\nexport class Player {\n  id: string;\n  name: string;\n  isOnline: boolean;\n\n  constructor({ id = uuid(), name, isOnline }: Optional<Player, \"id\">) {\n    this.name = name;\n    this.isOnline = isOnline;\n    this.id = id;\n  }\n}\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { RootState } from \"../store/store\";\nimport { Player } from \"./Player\";\n\ntype OtherPlayersState = { [id: string]: Player };\n\nconst initialState: OtherPlayersState = {};\n\nexport const playersSlice = createSlice({\n  name: \"players\",\n  initialState,\n  reducers: {\n    addOrUpdatePlayer: (\n      state,\n      { payload: newPlayer }: PayloadAction<Player>\n    ) => ({\n      ...state,\n      [newPlayer.id]: newPlayer,\n    }),\n    markPlayerOffline: (\n      state,\n      { payload: id }: PayloadAction<Player[\"id\"]>\n    ) => {\n      if (state[id] === undefined) {\n        return;\n      }\n      state[id].isOnline = false;\n    },\n  },\n});\n\nexport const { addOrUpdatePlayer, markPlayerOffline } = playersSlice.actions;\n\nexport const selectPlayers = (state: RootState): Player[] =>\n  Object.values(state.players);\n\nexport const reducer = playersSlice.reducer;\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { RootState } from \"../store/store\";\n\ninterface RoomSettingsState {\n  isHost: boolean;\n}\n\nconst initialState: RoomSettingsState = {\n  isHost: false,\n};\n\nexport const roomSettingsSlice = createSlice({\n  name: \"roomSettings\",\n  initialState,\n  reducers: {\n    setHost: (state, action: PayloadAction<boolean>) => ({\n      ...state,\n      isHost: action.payload,\n    }),\n  },\n});\n\nexport const { setHost } = roomSettingsSlice.actions;\nexport const selectRoomSettings = (state: RootState) => state.roomSettings;\nexport const selectIsHost = (state: RootState) =>\n  selectRoomSettings(state).isHost;\n\nexport const reducer = roomSettingsSlice.reducer;\n","import { useState } from \"react\";\nimport createRandomWords from \"random-words\";\n\nexport function createRandomRoomCode() {\n  return (createRandomWords(3) as string[]).join(\"-\");\n}\n\nexport function useRandomRoomCode() {\n  const [roomCode] = useState(() => createRandomRoomCode());\n  return roomCode;\n}\n","export function getRoomPath(roomCode: string) {\n  return `/room/${roomCode}`;\n}\n","import { createRandomRoomCode, useRandomRoomCode } from \"./useRandomRoomCode\";\nimport { useHistory, useQuery } from \"../router\";\nimport { getRoomPath } from \"../RoomView/getRoomPath\";\nimport { en } from \"../locale\";\nimport React, { useState } from \"react\";\nimport {\n  Button,\n  IconButton,\n  InputAdornment,\n  TextField,\n  Tooltip,\n} from \"@material-ui/core\";\nimport { Cached } from \"@material-ui/icons\";\nimport { useDispatch } from \"../store/useDispatch\";\nimport { setHost } from \"../roomSettings\";\n\nexport function RoomCodeForm() {\n  const { push } = useHistory();\n  const randomRoomCode = useRandomRoomCode();\n  const query = useQuery();\n  const dispatch = useDispatch();\n\n  const roomCodeFromQuery = query.get(\"roomCode\");\n  const [roomCode, setRoomCode] = useState(roomCodeFromQuery ?? randomRoomCode);\n\n  return (\n    <form\n      onSubmit={(event) => {\n        event.preventDefault();\n        dispatch(setHost(true));\n        push(getRoomPath(roomCode));\n      }}\n      style={{\n        display: \"flex\",\n        gap: 12,\n      }}\n    >\n      <TextField\n        autoComplete=\"off\"\n        autoFocus\n        id={\"roomCode\"}\n        label={en.MainView.roomCodeLabel}\n        value={roomCode}\n        variant=\"standard\"\n        InputProps={{\n          endAdornment: (\n            <InputAdornment position=\"end\">\n              <Tooltip title={en.MainView.generateNewRoomCode}>\n                <IconButton\n                  aria-label={en.MainView.generateNewRoomCode}\n                  onClick={() => setRoomCode(createRandomRoomCode())}\n                >\n                  <Cached />\n                </IconButton>\n              </Tooltip>\n            </InputAdornment>\n          ),\n          readOnly: true,\n        }}\n      />\n      <Button type=\"submit\" variant=\"contained\" color=\"primary\">\n        {en.MainView.createRoom}\n      </Button>\n    </form>\n  );\n}\n","import { useLocation } from \"react-router-dom\";\n\nexport function useQuery() {\n  return new URLSearchParams(useLocation().search);\n}\n","import { en } from \"../locale\";\nimport React, { useState } from \"react\";\nimport { useName } from \"../me\";\nimport { Button, TextField } from \"@material-ui/core\";\n\nexport function NameForm() {\n  const [name, saveName] = useName();\n  const [nameDraft, setNameDraft] = useState(name ?? \"\");\n  return (\n    <form\n      onSubmit={(event) => {\n        event.preventDefault();\n        saveName(nameDraft);\n      }}\n      style={{\n        display: \"flex\",\n        gap: 12,\n      }}\n    >\n      <TextField\n        autoComplete=\"off\"\n        id={\"name\"}\n        label={en.MainView.nameLabel}\n        value={nameDraft}\n        variant=\"filled\"\n        onChange={(event) => setNameDraft(event.target.value)}\n      />\n      <Button type=\"submit\" variant=\"contained\" color=\"primary\">\n        {en.MainView.saveName}\n      </Button>\n    </form>\n  );\n}\n","import React from \"react\";\nimport { Container, Typography } from \"@material-ui/core\";\nimport { RoomCodeForm } from \"./RoomCodeForm\";\nimport { NameForm } from \"./NameForm\";\nimport { useName } from \"../me\";\n\nexport function MainView() {\n  const [name] = useName();\n  return (\n    <Container>\n      <Typography variant=\"h3\" gutterBottom>\n        Hi {name ?? \"there\"}!\n      </Typography>\n      <div\n        style={{\n          display: \"flex\",\n          flexDirection: \"column\",\n          gap: 12,\n        }}\n      >\n        <NameForm />\n        {name && <RoomCodeForm />}\n      </div>\n    </Container>\n  );\n}\n","export function getMainPath(roomCode?: string) {\n  if (roomCode === undefined) {\n    return \"/\";\n  }\n  return `/?roomCode=${roomCode}`;\n}\n","import { Button, Container, Typography } from \"@material-ui/core\";\nimport React, { FunctionComponent } from \"react\";\nimport { NameForm } from \"../MainView/NameForm\";\nimport { en } from \"../locale\";\nimport { useName } from \"../me\";\nimport { Link } from \"../router\";\nimport { getRoomPath } from \"../RoomView/getRoomPath\";\n\nconst locale = en.JoinRoomView;\n\ninterface Props {\n  roomCode: string;\n}\n\nexport const JoinRoomView: FunctionComponent<Props> = ({ roomCode }) => {\n  const [name] = useName();\n  return (\n    <Container>\n      <Typography variant=\"h3\" gutterBottom>\n        {locale.heading}\n      </Typography>\n      <div\n        style={{\n          display: \"flex\",\n          alignItems: \"flex-start\",\n          flexDirection: \"column\",\n          gap: 12,\n        }}\n      >\n        <NameForm />\n        {name && (\n          <Button\n            color=\"primary\"\n            variant=\"contained\"\n            component={Link}\n            to={getRoomPath(roomCode)}\n          >\n            {locale.joinGame}\n          </Button>\n        )}\n      </div>\n    </Container>\n  );\n};\n","export function getInvitePath(roomCode: string) {\n  return `/invite/${roomCode}`;\n}\n","import {\n  ListItem,\n  ListItemIcon,\n  ListItemSecondaryAction,\n  ListItemText,\n  Tooltip,\n} from \"@material-ui/core\";\nimport { Home, Wifi, WifiOff } from \"@material-ui/icons\";\nimport { en } from \"../locale\";\nimport React, { FunctionComponent } from \"react\";\nimport { Player } from \"../players\";\n\ninterface Props {\n  isHost: boolean;\n  player: Player;\n}\n\nexport const PlayerListItem: FunctionComponent<Props> = ({\n  player: { name, isOnline },\n  isHost,\n}) => {\n  return (\n    <ListItem>\n      <ListItemIcon>\n        {isOnline ? (\n          <Wifi aria-label={en.RoomView.online} />\n        ) : (\n          <WifiOff aria-label={en.RoomView.offline} color=\"error\" />\n        )}\n      </ListItemIcon>\n      <ListItemText primary={name} />\n      {isHost && (\n        <ListItemSecondaryAction>\n          <Tooltip title={en.RoomView.host}>\n            <Home aria-label={en.RoomView.host} />\n          </Tooltip>\n        </ListItemSecondaryAction>\n      )}\n    </ListItem>\n  );\n};\n","import { createContext } from \"react\";\nimport { ChannelCreator } from \"./ChannelCreator\";\n\nexport const ChannelCreatorContext = createContext<ChannelCreator>(\n  (undefined as unknown) as ChannelCreator\n);\n","import { useEffect } from \"react\";\nimport { connectToChannel } from \"./connectToChannel\";\nimport { useStore } from \"react-redux\";\nimport { Channel } from \"../channel/Channel\";\n\nexport function useConnectionToChannel(channel: Channel) {\n  const store = useStore();\n  useEffect(() => {\n    connectToChannel(channel, store);\n  }, [channel, store]);\n}\n","import { Channel } from \"../channel/Channel\";\nimport { Store } from \"../store/store\";\nimport { Player } from \"./Player\";\nimport { Types } from \"ably\";\nimport { addOrUpdatePlayer, markPlayerOffline } from \"./playersSlice\";\n\nexport function connectToChannel(channel: Channel, store: Store) {\n  const newPlayerListener = (message: Types.PresenceMessage) => {\n    store.dispatch(\n      addOrUpdatePlayer(\n        new Player({\n          id: message.clientId,\n          name: message.data.name,\n          isOnline: true,\n        })\n      )\n    );\n  };\n\n  function playerLeavingListener(message: Types.PresenceMessage) {\n    store.dispatch(markPlayerOffline(message.clientId));\n  }\n\n  channel.presence.subscribe(\"enter\", newPlayerListener);\n  channel.presence.subscribe(\"present\", newPlayerListener);\n  channel.presence.subscribe(\"leave\", playerLeavingListener);\n}\n","import React, { FunctionComponent, useEffect, useState } from \"react\";\nimport {\n  Button,\n  Container,\n  Grid,\n  List,\n  ListSubheader,\n  Paper,\n  Typography,\n} from \"@material-ui/core\";\nimport { CopyToClipboard } from \"react-copy-to-clipboard\";\nimport { en } from \"../locale\";\nimport { useName } from \"../me\";\nimport { PlayerListItem } from \"./PlayerListItem\";\nimport { usePlayers } from \"../players\";\nimport { getInvitePath } from \"../JoinRoomView/getInvitePath\";\nimport { useChannelCreator } from \"../channel/useChannelCreator\";\nimport { useId } from \"../me/useId\";\nimport { useConnectionToChannel } from \"../players/useConnectionToChannel\";\nimport { convertPathToUrl } from \"./convertPathToUrl\";\n\ninterface Props {\n  roomCode: string;\n}\n\nexport const RoomView: FunctionComponent<Props> = ({ roomCode }) => {\n  const myId = useId();\n  const [myName] = useName();\n  const players = usePlayers();\n  const channelCreator = useChannelCreator();\n  const [channel] = useState(() => channelCreator(roomCode));\n  useConnectionToChannel(channel);\n  useEffect(() => {\n    channel.presence.enterClient(myId, { name: myName });\n    return () => channel.presence.leaveClient(myId);\n  }, [channel, myId, myName]);\n\n  return (\n    <Container>\n      <Grid container justify=\"space-between\" alignItems=\"center\">\n        <Grid item>\n          <Typography variant=\"h3\" gutterBottom>\n            Room\n          </Typography>\n        </Grid>\n        <Grid item>\n          <CopyToClipboard text={convertPathToUrl(getInvitePath(roomCode))}>\n            <Button variant=\"contained\" color=\"primary\">\n              {en.RoomView.copyInviteLink}\n            </Button>\n          </CopyToClipboard>\n        </Grid>\n      </Grid>\n      <Paper>\n        <List\n          subheader={\n            <ListSubheader>{en.RoomView.playersListHeader}</ListSubheader>\n          }\n        >\n          {players.map((player) => (\n            <PlayerListItem key={player.name} player={player} isHost />\n          ))}\n        </List>\n      </Paper>\n    </Container>\n  );\n};\n","export function convertPathToUrl(path: string) {\n  return `${window.location.protocol}//${window.location.host}${process.env.PUBLIC_URL}${path}`;\n}\n","import { selectId } from \"./meSlice\";\nimport { useSelector } from \"../store/useSelector\";\n\nexport function useId() {\n  return useSelector(selectId);\n}\n","import { selectPlayers } from \"./playersSlice\";\nimport { useSelector } from \"../store/useSelector\";\n\nexport function usePlayers() {\n  return useSelector(selectPlayers);\n}\n","import { useContext } from \"react\";\nimport { ChannelCreatorContext } from \"./ChannelCreatorContext\";\n\nexport function useChannelCreator() {\n  return useContext(ChannelCreatorContext);\n}\n","import { useName } from \"../me\";\nimport { useSelector } from \"../store/useSelector\";\nimport { selectIsHost } from \"../roomSettings\";\nimport { Redirect } from \"../router\";\nimport { getMainPath } from \"../MainView/getMainPath\";\nimport { getInvitePath } from \"../JoinRoomView/getInvitePath\";\nimport React from \"react\";\nimport { RoomView } from \"./RoomView\";\n\ninterface Props {\n  roomCode: string;\n}\n\nexport function RoomNameGuard({ roomCode }: Props) {\n  const [myName] = useName();\n  const isHost = useSelector(selectIsHost);\n\n  if (myName === null) {\n    if (isHost) {\n      return <Redirect to={getMainPath(roomCode)} />;\n    } else {\n      return <Redirect to={getInvitePath(roomCode)} />;\n    }\n  }\n\n  return <RoomView roomCode={roomCode} />;\n}\n","import React from \"react\";\nimport { MainView } from \"./MainView/MainView\";\nimport \"fontsource-roboto\";\nimport { Route, Switch } from \"./router\";\nimport { getRoomPath } from \"./RoomView/getRoomPath\";\nimport { getMainPath } from \"./MainView/getMainPath\";\nimport { JoinRoomView } from \"./JoinRoomView/JoinRoomView\";\nimport { getInvitePath } from \"./JoinRoomView/getInvitePath\";\nimport { RoomNameGuard } from \"./RoomView/RoomNameGuard\";\n\nexport function App() {\n  return (\n    <Switch>\n      <Route path={getRoomPath(\":roomCode\")}>\n        {({ match }) => <RoomNameGuard roomCode={match!.params.roomCode!} />}\n      </Route>\n      <Route path={getInvitePath(\":roomCode\")}>\n        {({ match }) => <JoinRoomView roomCode={match!.params.roomCode!} />}\n      </Route>\n      <Route path={getMainPath()}>\n        <MainView />\n      </Route>\n    </Switch>\n  );\n}\n","import { FunctionComponent } from \"react\";\nimport { ChannelCreatorContext } from \"./ChannelCreatorContext\";\nimport { ChannelCreator } from \"./ChannelCreator\";\n\ninterface Props {\n  channelCreator: ChannelCreator;\n}\n\nexport const ChannelCreatorProvider: FunctionComponent<Props> = ({\n  children,\n  channelCreator,\n}) => (\n  <ChannelCreatorContext.Provider value={channelCreator}>\n    {children}\n  </ChannelCreatorContext.Provider>\n);\n","import Ably from \"ably\";\n\nconst API_KEY: unknown = process.env.REACT_APP_ABLY_API_KEY;\n\nif (typeof API_KEY !== \"string\" || API_KEY === \"\") {\n  throw new TypeError(\"No Ably API key set in env var REACT_APP_ABLY_API_KEY\");\n}\n\nconst channels = new Ably.Realtime(API_KEY).channels;\nexport const ablyChannelCreator = channels.get.bind(channels);\n","import { BrowserRouter } from \"./router\";\nimport { Provider } from \"react-redux\";\nimport { createStore } from \"./store/store\";\nimport { App } from \"./App\";\nimport React from \"react\";\nimport { ChannelCreatorProvider } from \"./channel/ChannelCreatorProvider\";\nimport { ablyChannelCreator } from \"./channel/ablyChannelCreator\";\n\nexport const ConnectedApp = () => (\n  <ChannelCreatorProvider channelCreator={ablyChannelCreator}>\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n      <Provider store={createStore()}>\n        <App />\n      </Provider>\n    </BrowserRouter>\n  </ChannelCreatorProvider>\n);\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport { reducer as meReducer } from \"../me/\";\nimport { reducer as playersReducer } from \"../players\";\nimport { reducer as roomSettingsReducer } from \"../roomSettings\";\n\nexport function createStore() {\n  return configureStore({\n    reducer: {\n      me: meReducer,\n      players: playersReducer,\n      roomSettings: roomSettingsReducer,\n    },\n  });\n}\n\nexport type Store = ReturnType<typeof createStore>;\nexport type RootState = ReturnType<Store[\"getState\"]>;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { ConnectedApp } from \"./ConnectedApp\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <ConnectedApp />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}