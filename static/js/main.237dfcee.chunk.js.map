{"version":3,"sources":["serviceWorker.ts","services/localStorage/index.ts","business-logic/me/meSlice.ts","business-logic/useDispatch.ts","business-logic/useSelector.ts","business-logic/me/useName.ts","business-logic/game/Player.ts","business-logic/players/playersSlice.ts","business-logic/players/usePlayers.ts","business-logic/roomSettings/roomSettingsSlice.ts","business-logic/game/Status.ts","business-logic/game/chooseWordsForPlayers.ts","business-logic/game/gameSlice.ts","business-logic/game/MockPlayer.ts","business-logic/game/useDispatchWithId.ts","business-logic/me/useId.ts","business-logic/game/calculateMyPoints.ts","business-logic/players/connectToChannel.ts","business-logic/game/gameSaga.ts","business-logic/store.ts","services/channel/ChannelCreatorContext.ts","services/channel/ChannelCreatorProvider.tsx","services/channel/ablyChannelCreator.ts","Connection.tsx","views/MainView/useRandomRoomCode.ts","views/WaitingRoomView/getWaitingRoomPath.ts","views/MainView/RoomCodeForm.tsx","services/router/useQuery.ts","views/MainView/NameForm.tsx","views/MainView/MainView.tsx","views/MainView/getMainPath.ts","views/JoinRoomView/JoinRoomView.tsx","views/JoinRoomView/getInvitePath.ts","views/WaitingRoomView/PlayerListItem.tsx","views/GameRoomView/getGameRoomPath.ts","views/WaitingRoomView/WaitingRoomView.tsx","views/WaitingRoomView/useRoom.ts","views/WaitingRoomView/convertPathToUrl.ts","views/WaitingRoomView/useStartGame.tsx","views/WaitingRoomView/WaitingRoomNameGuard.tsx","views/GameRoomView/MyWord.tsx","business-logic/game/useMyWord.ts","views/GameRoomView/AddDescriptionView.tsx","business-logic/game/useAddFirstDescription.ts","business-logic/game/useAddSecondDescription.ts","views/GameRoomView/AddGuessView.tsx","business-logic/game/useAddFirstGuess.ts","business-logic/game/useAddSecondGuess.ts","views/GameRoomView/RoundSummaryView.tsx","business-logic/game/usePlayers.ts","views/GameRoomView/GameRoomView.tsx","business-logic/game/useStatus.ts","App.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","saveToLocalStorage","key","value","localStorage","setItem","getFromLocalStorage","getItem","initialState","id","uuid","loadOrCreateId","name","meSlice","createSlice","reducers","setName","state","action","payload","selectName","me","selectId","actions","reducer","useDispatch","useUntypedDispatch","useSelector","useUntypedSelector","useName","dispatch","newName","setNameAction","Player","isOnline","word","descriptions","guesses","this","playersSlice","addOrUpdatePlayer","newPlayer","markPlayerOffline","undefined","selectPlayers","Object","values","players","usePlayers","Status","roomSettingsSlice","isHost","setHost","selectIsHost","roomSettings","selectRoomSettings","isEven","num","myWord","seed","status","WaitingForGameStart","wordList","gameSlice","joinRoom","leaveRoom","startGame","randomWords","numberOfPlayers","result","push","numberOfWordsToAdd","i","rng","seedrandom","sort","chooseWordsForPlayers","length","map","player","index","ChoosingFirstDescription","addFirstDescriptionToPlayer","description","playerToUpdate","find","every","GuessingFirstTeam","addSecondDescriptionToPlayer","GuessingSecondTeam","addFirstGuessToPlayer","guess","ChoosingSecondDescription","addSecondGuessToPlayer","GameOver","selectMyWord","game","selectStatus","MockPlayer","overrides","faker","firstName","assign","useDispatchWithId","actionCreator","QUESTION_MARK","calculateMyPoints","teamsByWords","mapObjIndexed","groupBy","getTeamsByWords","points","omit","filter","team","hasGuessedTeam","countGuessedTeams","isOtherQuestionMark","includes","flat","countGuessedQuestionMarks","flatMap","countOthersGuessingMe","partner","otherPlayers","TypeError","guessedUs","calculateMyPointsInTeam","curry","firstPlayerId","secondPlayerId","some","connectToChannel","handleMessage","channel","presence","eventChannel","emitter","subscribe","unsubscribe","take","message","call","put","clientId","data","gameSaga","presenceSaga","enterRoomSaga","leaveRoomSaga","roomCode","getContext","createChannel","fork","select","enterClient","leaveClient","createStore","sagaMiddleware","createSagaMiddleware","context","customizedMiddleware","getDefaultMiddleware","serializableCheck","thunk","store","configureStore","middleware","gameReducer","meReducer","playersReducer","roomSettingsReducer","run","ChannelCreatorContext","createContext","ChannelCreatorProvider","children","channelCreator","Provider","API_KEY","process","channels","Ably","Realtime","ablyChannelCreator","get","bind","Connection","basename","createRandomRoomCode","createRandomWords","join","getWaitingRoomPath","RoomCodeForm","useHistory","randomRoomCode","useState","useRandomRoomCode","query","URLSearchParams","useLocation","search","roomCodeFromQuery","setRoomCode","onSubmit","event","preventDefault","style","display","gap","TextField","autoComplete","autoFocus","label","en","MainView","roomCodeLabel","variant","InputProps","endAdornment","InputAdornment","position","Tooltip","title","generateNewRoomCode","IconButton","aria-label","onClick","Cached","readOnly","Button","type","color","createRoom","NameForm","saveName","nameDraft","setNameDraft","nameLabel","onChange","target","Container","Typography","gutterBottom","flexDirection","getMainPath","locale","JoinRoomView","heading","alignItems","component","Link","to","joinGame","getInvitePath","PlayerListItem","ListItem","ListItemIcon","Wifi","WaitingRoomView","online","WifiOff","offline","ListItemText","primary","ListItemSecondaryAction","host","Home","getGameRoomPath","useEffect","useRoom","path","startGameAction","words","useStartGame","Grid","container","justify","item","text","protocol","copyInviteLink","Paper","List","subheader","ListSubheader","playersListHeader","WaitingRoomNameGuard","myName","MyWord","Card","CardContent","GameRoomView","myWordLabel","aria-labelledby","youReTheQuestionMark","DescriptionForm","onChoose","setDescription","descriptionChosen","setDescriptionChosen","noValidate","disabled","describeYourWord","AddDescriptionView","AddFirstDescriptionView","addFirstDescription","AddSecondDescriptionView","addSecondDescription","AddGuessView","setGuess","checked","FormControl","required","FormLabel","FormGroup","FormControlLabel","control","Checkbox","AddFirstGuessView","addFirstGuess","AddSecondGuessView","addSecondGuess","RoundSummaryView","JSON","stringify","App","params","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.237dfcee.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === \"[::1]\" ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n            \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker.register(swUrl).then(registration => {\n    registration.onupdatefound = () => {\n      const installingWorker = registration.installing;\n      if (installingWorker == null) {\n        return;\n      }\n      installingWorker.onstatechange = () => {\n        if (installingWorker.state === \"installed\") {\n          if (navigator.serviceWorker.controller) {\n            // At this point, the updated precached content has been fetched,\n            // but the previous service worker will still serve the older\n            // content until all client tabs are closed.\n            console.log(\n              \"New content is available and will be used when all \" +\n              \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n            );\n\n            // Execute callback\n            if (config && config.onUpdate) {\n              config.onUpdate(registration);\n            }\n          } else {\n            // At this point, everything has been precached.\n            // It's the perfect time to display a\n            // \"Content is cached for offline use.\" message.\n            console.log(\"Content is cached for offline use.\");\n\n            // Execute callback\n            if (config && config.onSuccess) {\n              config.onSuccess(registration);\n            }\n          }\n        }\n      };\n    };\n  }).catch(error => {\n    console.error(\"Error during service worker registration:\", error);\n  });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" }\n  }).then(response => {\n    // Ensure service worker exists, and that we really are getting a JS file.\n    const contentType = response.headers.get(\"content-type\");\n    if (\n      response.status === 404 ||\n      (contentType != null && contentType.indexOf(\"javascript\") === -1)\n    ) {\n      // No service worker found. Probably a different app. Reload the page.\n      navigator.serviceWorker.ready.then(registration => {\n        registration.unregister().then(() => {\n          window.location.reload();\n        });\n      });\n    } else {\n      // Service worker found. Proceed as normal.\n      registerValidSW(swUrl, config);\n    }\n  }).catch(() => {\n    console.log(\n      \"No internet connection found. App is running in offline mode.\"\n    );\n  });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    }).catch(error => {\n      console.error(error.message);\n    });\n  }\n}\n","export function saveToLocalStorage(key: string, value: string): string {\n  localStorage.setItem(`qnot/${key}`, value);\n  return value;\n}\n\nexport function getFromLocalStorage(key: string): string | null {\n  return localStorage.getItem(`qnot/${key}`) ?? null;\n}\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { v4 as uuid } from \"uuid\";\nimport { RootState } from \"../store\";\nimport {\n  getFromLocalStorage,\n  saveToLocalStorage,\n} from \"../../services/localStorage\";\n\ntype MeState = {\n  id: string;\n  name: string | null;\n};\n\nfunction loadOrCreateId() {\n  return getFromLocalStorage(\"id\") ?? saveToLocalStorage(\"id\", uuid());\n}\n\nconst initialState: MeState = {\n  id: loadOrCreateId(),\n  name: getFromLocalStorage(\"name\"),\n};\n\nexport const meSlice = createSlice({\n  name: \"me\",\n  initialState,\n  reducers: {\n    setName: (state, action: PayloadAction<string>) => ({\n      ...state,\n      name: action.payload,\n    }),\n  },\n});\n\nexport const selectName = (state: RootState) => state.me.name;\nexport const selectId = (state: RootState) => state.me.id;\n\nexport const { setName } = meSlice.actions;\n\nexport const reducer = meSlice.reducer;\n","import { useDispatch as useUntypedDispatch } from \"react-redux\";\nimport { Store } from \"./store\";\n\nexport const useDispatch = () => useUntypedDispatch<Store[\"dispatch\"]>();\n","import {\n  TypedUseSelectorHook,\n  useSelector as useUntypedSelector,\n} from \"react-redux\";\nimport { RootState } from \"./store\";\n\nexport const useSelector: TypedUseSelectorHook<RootState> = useUntypedSelector;\n","import { useDispatch } from \"../useDispatch\";\nimport { selectName, setName as setNameAction } from \"./meSlice\";\nimport { useSelector } from \"../useSelector\";\nimport { saveToLocalStorage } from \"../../services/localStorage\";\n\nexport function useName() {\n  const name = useSelector(selectName);\n  const dispatch = useDispatch();\n  const setName = (newName: string) => {\n    saveToLocalStorage(\"name\", newName);\n    dispatch(setNameAction(newName));\n  };\n  return [name, setName] as const;\n}\n","import { v4 as uuid } from \"uuid\";\nimport { Optional } from \"utility-types\";\n\nexport type Guess = [Player[\"id\"], Player[\"id\"]];\n\nexport class Player {\n  id: string;\n  name: string;\n  isOnline: boolean;\n  word?: string | null;\n  descriptions: string[] = [];\n  guesses: Guess[] = [];\n\n  constructor({\n    id = uuid(),\n    name,\n    isOnline,\n  }: Optional<Player, \"id\" | \"descriptions\" | \"guesses\">) {\n    this.name = name;\n    this.isOnline = isOnline;\n    this.id = id;\n  }\n}\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { RootState } from \"../store\";\nimport { Player } from \"../game\";\n\ntype OtherPlayersState = { [id: string]: Player };\n\nconst initialState: OtherPlayersState = {};\n\nexport const playersSlice = createSlice({\n  name: \"players\",\n  initialState,\n  reducers: {\n    addOrUpdatePlayer: (\n      state,\n      { payload: newPlayer }: PayloadAction<Player>\n    ) => ({\n      ...state,\n      [newPlayer.id]: newPlayer,\n    }),\n    markPlayerOffline: (\n      state,\n      { payload: id }: PayloadAction<Player[\"id\"]>\n    ) => {\n      if (state[id] === undefined) {\n        return;\n      }\n      state[id].isOnline = false;\n    },\n  },\n});\n\nexport const { addOrUpdatePlayer, markPlayerOffline } = playersSlice.actions;\n\nexport const selectPlayers = (state: RootState): Player[] =>\n  Object.values(state.players);\n\nexport const reducer = playersSlice.reducer;\n","import { selectPlayers } from \"./playersSlice\";\nimport { useSelector } from \"../useSelector\";\n\nexport function usePlayers() {\n  return useSelector(selectPlayers);\n}\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { RootState } from \"../store\";\n\ninterface RoomSettingsState {\n  isHost: boolean;\n}\n\nconst initialState: RoomSettingsState = {\n  isHost: false,\n};\n\nexport const roomSettingsSlice = createSlice({\n  name: \"roomSettings\",\n  initialState,\n  reducers: {\n    setHost: (state, action: PayloadAction<boolean>) => ({\n      ...state,\n      isHost: action.payload,\n    }),\n  },\n});\n\nexport const { setHost } = roomSettingsSlice.actions;\nexport const selectRoomSettings = (state: RootState) => state.roomSettings;\nexport const selectIsHost = (state: RootState) =>\n  selectRoomSettings(state).isHost;\n\nexport const reducer = roomSettingsSlice.reducer;\n","export enum Status {\n  WaitingForGameStart = \"WaitingForGameStart\",\n  ChoosingFirstDescription = \"ChoosingFirstDescription\",\n  GuessingFirstTeam = \"GuessingFirstTeam\",\n  ChoosingSecondDescription = \"ChoosingSecondDescription\",\n  GuessingSecondTeam = \"GuessingSecondTeam\",\n  GameOver = \"GameOver\",\n}\n","import seedrandom from \"seedrandom\";\n\nexport function chooseWordsForPlayers(\n  wordList: string[],\n  numberOfPlayers: number,\n  seed: string\n) {\n  const result: Array<string | null> = [null];\n  if (isEven(numberOfPlayers)) {\n    result.push(null);\n  }\n\n  const numberOfWordsToAdd = isEven(numberOfPlayers)\n    ? numberOfPlayers - 2\n    : numberOfPlayers - 1;\n  for (let i = 0; i < numberOfWordsToAdd / 2; i++) {\n    result.push(wordList[i], wordList[i]);\n  }\n\n  const rng = seedrandom(seed);\n  return result.sort(() => rng() - 0.5);\n}\n\nfunction isEven(num: number) {\n  return num % 2 === 0;\n}\n","import { v4 as uuid } from \"uuid\";\nimport { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { RootState } from \"../store\";\nimport { Guess, Player } from \"./Player\";\nimport { chooseWordsForPlayers } from \"./chooseWordsForPlayers\";\nimport { selectId } from \"../me/meSlice\";\nimport { Status } from \"./Status\";\n\ninterface GameState {\n  myWord: string | null;\n  players: Player[];\n  seed: string;\n  status: Status;\n  wordList: string[];\n}\n\nconst initialState: GameState = {\n  myWord: null,\n  players: [],\n  seed: uuid(),\n  status: Status.WaitingForGameStart,\n  wordList: [],\n};\n\ninterface GameConfig {\n  players: Player[];\n  seed: string;\n  wordList: string[];\n}\n\nconst gameSlice = createSlice({\n  name: \"game\",\n  initialState: initialState,\n  reducers: {\n    joinRoom: (state, { payload: roomCode }: PayloadAction<string>) => state,\n    leaveRoom: (state) => state,\n    startGame: (\n      state,\n      { payload: { players, seed, wordList } }: PayloadAction<GameConfig>\n    ) => {\n      const randomWords = chooseWordsForPlayers(wordList, players.length, seed);\n\n      return {\n        ...state,\n        players: players.map((player, index) => ({\n          ...player,\n          word: randomWords[index],\n        })),\n        seed,\n        status: Status.ChoosingFirstDescription,\n        wordList,\n      };\n    },\n    addFirstDescriptionToPlayer: (\n      state,\n      {\n        payload: { description, id },\n      }: PayloadAction<{ description: string; id: Player[\"id\"] }>\n    ) => {\n      const playerToUpdate = state.players.find((player) => player.id === id);\n      if (playerToUpdate === undefined) {\n        return;\n      }\n      playerToUpdate.descriptions[0] = description;\n      if (state.players.every((player) => player.descriptions.length === 1)) {\n        state.status = Status.GuessingFirstTeam;\n      }\n    },\n    addSecondDescriptionToPlayer: (\n      state,\n      {\n        payload: { description, id },\n      }: PayloadAction<{ description: string; id: Player[\"id\"] }>\n    ) => {\n      const playerToUpdate = state.players.find((player) => player.id === id);\n      if (playerToUpdate === undefined) {\n        return;\n      }\n      playerToUpdate.descriptions[1] = description;\n      if (state.players.every((player) => player.descriptions.length === 2)) {\n        state.status = Status.GuessingSecondTeam;\n      }\n    },\n    addFirstGuessToPlayer: (\n      state,\n      {\n        payload: { guess, id },\n      }: PayloadAction<{\n        guess: Guess;\n        id: Player[\"id\"];\n      }>\n    ) => {\n      const playerToUpdate = state.players.find((player) => player.id === id);\n      if (playerToUpdate === undefined) {\n        return;\n      }\n      playerToUpdate.guesses[0] = guess;\n      if (state.players.every((player) => player.guesses.length === 1)) {\n        state.status = Status.ChoosingSecondDescription;\n      }\n    },\n    addSecondGuessToPlayer: (\n      state,\n      {\n        payload: { guess, id },\n      }: PayloadAction<{\n        guess: Guess;\n        id: Player[\"id\"];\n      }>\n    ) => {\n      const playerToUpdate = state.players.find((player) => player.id === id);\n      if (playerToUpdate === undefined) {\n        return;\n      }\n      playerToUpdate.guesses[1] = guess;\n      if (state.players.every((player) => player.guesses.length === 2)) {\n        state.status = Status.GameOver;\n      }\n    },\n  },\n});\n\nexport const { reducer } = gameSlice;\n\nexport const {\n  addFirstGuessToPlayer,\n  addSecondGuessToPlayer,\n  addFirstDescriptionToPlayer,\n  addSecondDescriptionToPlayer,\n  joinRoom,\n  leaveRoom,\n  startGame,\n} = gameSlice.actions;\n\nexport function selectMyWord(state: RootState) {\n  return state.game.players.find((player) => player.id === selectId(state))\n    ?.word;\n}\n\nexport function selectStatus(state: RootState) {\n  return state.game.status;\n}\n\nexport function selectPlayers(state: RootState) {\n  return state.game.players;\n}\n\nexport function selectWordList(state: RootState) {\n  return state.game.wordList;\n}\n\nexport function selectSeed(state: RootState) {\n  return state.game.seed;\n}\n","import { v4 as uuid } from \"uuid\";\nimport { Player } from \"./Player\";\nimport faker from \"faker\";\n\nexport class MockPlayer implements Player {\n  id = uuid();\n  name = faker.name.firstName();\n  isOnline = true;\n  descriptions = [];\n  guesses = [];\n\n  constructor(overrides: Partial<Player> = {}) {\n    Object.assign(this, overrides);\n  }\n}\n","import { Player } from \"./Player\";\nimport { PayloadAction } from \"@reduxjs/toolkit\";\nimport { useId } from \"../me/useId\";\nimport { useDispatch } from \"../useDispatch\";\n\nexport function useDispatchWithId<Value>(\n  actionCreator: (id: Player[\"id\"], value: Value) => PayloadAction<unknown>\n) {\n  const id = useId();\n  const dispatch = useDispatch();\n\n  function dispatchAction(value: Value) {\n    dispatch(actionCreator(id, value));\n  }\n\n  return dispatchAction;\n}\n","import { selectId } from \"./meSlice\";\nimport { useSelector } from \"../useSelector\";\n\nexport function useId() {\n  return useSelector(selectId);\n}\n","import { curry, groupBy, mapObjIndexed, omit, values } from \"ramda\";\nimport { v4 as uuid } from \"uuid\";\nimport { Player } from \"./Player\";\n\nconst QUESTION_MARK = \"QUESTION_MARK\" + uuid();\n\nexport function calculateMyPoints(me: Player, players: Player[]) {\n  const teamsByWords = getTeamsByWords(players);\n\n  let points = 0;\n  points += countGuessedTeams(me, teamsByWords);\n  points -= countGuessedQuestionMarks(me, teamsByWords);\n\n  if (me.word === null) {\n    points += countOthersGuessingMe(me, players);\n  } else {\n    points += calculateMyPointsInTeam(me, players);\n  }\n  return points;\n}\n\nfunction getTeamsByWords(players: Player[]) {\n  return mapObjIndexed(\n    (players) => players.map((player) => player.id),\n    groupBy<Player, string>((player) => player.word ?? QUESTION_MARK, players)\n  );\n}\n\nconst hasGuessedTeam = curry(\n  (firstPlayerId: Player[\"id\"], secondPlayerId: Player[\"id\"], player: Player) =>\n    player.guesses.some(\n      (guess) => guess.includes(firstPlayerId) && guess.includes(secondPlayerId)\n    )\n);\n\nfunction countGuessedTeams(\n  me: Player,\n  teamsByWords: { [id: string]: string[] }\n) {\n  const otherTeams = values(\n    omit([QUESTION_MARK, ...(me.word ? [me.word] : [])], teamsByWords)\n  );\n  return otherTeams.filter((team) => hasGuessedTeam(team[0], team[1], me))\n    .length;\n}\n\nfunction countGuessedQuestionMarks(\n  me: Player,\n  teamsByWords: { [p: string]: string[] }\n) {\n  const isOtherQuestionMark = (id: Player[\"id\"]) =>\n    id !== me.id && teamsByWords[QUESTION_MARK].includes(id);\n  return me.guesses.flat().filter(isOtherQuestionMark).length;\n}\n\nfunction calculateMyPointsInTeam(me: Player, players: Player[]): number {\n  let points = 0;\n  const partner = players.find(\n    (player) => player.word === me.word && player.id !== me.id\n  );\n  const otherPlayers = players.filter((player) => player.word !== me.word);\n  if (partner === undefined) {\n    throw new TypeError(`Cannot find second player with word ${me.word}`);\n  }\n\n  const guessedUs = hasGuessedTeam(me.id, partner.id);\n  if (guessedUs(partner) && guessedUs(me)) {\n    points += 3;\n  }\n\n  points -= otherPlayers.filter(guessedUs).length;\n  return points;\n}\n\nfunction countOthersGuessingMe(me: Player, players: Player[]) {\n  const guessesByOtherPlayers = players\n    .filter((player) => player.id !== me.id)\n    .flatMap((player) => player.guesses);\n  return guessesByOtherPlayers.filter((guess) => guess.includes(me.id)).length;\n}\n","import { Channel } from \"../../services/channel/Channel\";\nimport { Player } from \"../game\";\nimport { Types } from \"ably\";\nimport { addOrUpdatePlayer, markPlayerOffline } from \"./playersSlice\";\nimport { call, put, take } from \"redux-saga/effects\";\nimport { eventChannel } from \"redux-saga\";\n\nexport function* connectToChannel(channel: Channel) {\n  const presence = eventChannel((emitter) => {\n    const actions: Types.PresenceAction[] = [\"enter\", \"present\", \"leave\"];\n    channel.presence.subscribe(actions, emitter);\n    return () => channel.presence.unsubscribe(actions, emitter);\n  });\n\n  while (true) {\n    const message: Types.PresenceMessage = yield take(presence);\n    yield call(handleMessage, message);\n  }\n}\n\nexport function* handleMessage(message: Types.PresenceMessage) {\n  if ([\"enter\", \"present\"].includes(message.action)) {\n    yield put(\n      addOrUpdatePlayer(\n        new Player({\n          id: message.clientId,\n          name: message.data.name,\n          isOnline: true,\n        })\n      )\n    );\n  }\n  if ([\"leave\"].includes(message.action)) {\n    yield put(markPlayerOffline(message.clientId));\n  }\n}\n","import { call, fork, getContext, select, take } from \"redux-saga/effects\";\nimport { selectId, selectName } from \"../me/meSlice\";\nimport { ChannelCreator } from \"../../services/channel/ChannelCreator\";\nimport { joinRoom, leaveRoom } from \"./gameSlice\";\nimport { Channel } from \"../../services/channel/Channel\";\nimport { connectToChannel } from \"../players/connectToChannel\";\n\nexport function* gameSaga() {\n  yield call(presenceSaga);\n}\n\nfunction* presenceSaga() {\n  while (true) {\n    const { payload: roomCode } = yield take(joinRoom);\n    const createChannel: ChannelCreator = yield getContext(\"createChannel\");\n    const channel = createChannel(roomCode);\n    yield fork(enterRoomSaga, channel);\n    yield take(leaveRoom);\n    yield fork(leaveRoomSaga, channel);\n  }\n}\n\nfunction* enterRoomSaga(channel: Channel) {\n  const id: string = yield select(selectId);\n  const name: string = yield select(selectName);\n  yield fork(connectToChannel, channel);\n  channel.presence.enterClient(id, { name });\n}\n\nfunction* leaveRoomSaga(channel: Channel) {\n  const id: string = yield select(selectId);\n  channel.presence.leaveClient(id);\n}\n","import { configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\";\nimport { reducer as meReducer } from \"./me/\";\nimport { reducer as playersReducer } from \"./players\";\nimport { reducer as roomSettingsReducer } from \"./roomSettings\";\nimport { reducer as gameReducer } from \"./game\";\nimport createSagaMiddleware from \"redux-saga\";\nimport { gameSaga } from \"./game/gameSaga\";\nimport { ChannelCreator } from \"../services/channel/ChannelCreator\";\n\nexport function createStore(createChannel: ChannelCreator) {\n  const sagaMiddleware = createSagaMiddleware({ context: { createChannel } });\n\n  const customizedMiddleware = [\n    ...getDefaultMiddleware({\n      serializableCheck: false,\n      thunk: false,\n    }),\n    sagaMiddleware,\n  ];\n  const store = configureStore({\n    middleware: customizedMiddleware,\n    reducer: {\n      game: gameReducer,\n      me: meReducer,\n      players: playersReducer,\n      roomSettings: roomSettingsReducer,\n    },\n  });\n  sagaMiddleware.run(gameSaga);\n  return store;\n}\n\nexport type Store = ReturnType<typeof createStore>;\nexport type RootState = ReturnType<Store[\"getState\"]>;\n","import { createContext } from \"react\";\nimport { ChannelCreator } from \"./ChannelCreator\";\n\nexport const ChannelCreatorContext = createContext<ChannelCreator>(\n  (undefined as unknown) as ChannelCreator\n);\n","import React, { FunctionComponent } from \"react\";\nimport { ChannelCreatorContext } from \"./ChannelCreatorContext\";\nimport { ChannelCreator } from \"./ChannelCreator\";\n\ninterface Props {\n  channelCreator: ChannelCreator;\n}\n\nexport const ChannelCreatorProvider: FunctionComponent<Props> = ({\n  children,\n  channelCreator,\n}) => (\n  <ChannelCreatorContext.Provider value={channelCreator}>\n    {children}\n  </ChannelCreatorContext.Provider>\n);\n","import Ably from \"ably\";\n\nconst API_KEY: unknown = process.env.REACT_APP_ABLY_API_KEY;\n\nif (typeof API_KEY !== \"string\" || API_KEY === \"\") {\n  throw new TypeError(\"No Ably API key set in env var REACT_APP_ABLY_API_KEY\");\n}\n\nconst channels = new Ably.Realtime(API_KEY).channels;\nexport const ablyChannelCreator = channels.get.bind(channels);\n","import { BrowserRouter } from \"./services/router\";\nimport { Provider } from \"react-redux\";\nimport { createStore } from \"./business-logic/store\";\nimport React, { ReactNode } from \"react\";\nimport { ChannelCreatorProvider } from \"./services/channel/ChannelCreatorProvider\";\nimport { ablyChannelCreator } from \"./services/channel/ablyChannelCreator\";\n\ninterface Props {\n  children: ReactNode;\n}\n\nexport const Connection = ({ children }: Props) => (\n  <ChannelCreatorProvider channelCreator={ablyChannelCreator}>\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n      <Provider store={createStore(ablyChannelCreator)}>{children}</Provider>\n    </BrowserRouter>\n  </ChannelCreatorProvider>\n);\n","import { useState } from \"react\";\nimport createRandomWords from \"random-words\";\n\nexport function createRandomRoomCode() {\n  return (createRandomWords(3) as string[]).join(\"-\");\n}\n\nexport function useRandomRoomCode() {\n  const [roomCode] = useState(() => createRandomRoomCode());\n  return roomCode;\n}\n","export function getWaitingRoomPath(roomCode: string) {\n  return `/room/${roomCode}`;\n}\n","import { createRandomRoomCode, useRandomRoomCode } from \"./useRandomRoomCode\";\nimport { useHistory, useQuery } from \"../../services/router\";\nimport { getWaitingRoomPath } from \"../WaitingRoomView/getWaitingRoomPath\";\nimport { en } from \"../../services/locale\";\nimport React, { useState } from \"react\";\nimport {\n  Button,\n  IconButton,\n  InputAdornment,\n  TextField,\n  Tooltip,\n} from \"@material-ui/core\";\nimport { Cached } from \"@material-ui/icons\";\nimport { useDispatch } from \"../../business-logic/useDispatch\";\nimport { setHost } from \"../../business-logic/roomSettings\";\n\nexport function RoomCodeForm() {\n  const { push } = useHistory();\n  const randomRoomCode = useRandomRoomCode();\n  const query = useQuery();\n  const dispatch = useDispatch();\n\n  const roomCodeFromQuery = query.get(\"roomCode\");\n  const [roomCode, setRoomCode] = useState(roomCodeFromQuery ?? randomRoomCode);\n\n  return (\n    <form\n      onSubmit={(event) => {\n        event.preventDefault();\n        dispatch(setHost(true));\n        push(getWaitingRoomPath(roomCode));\n      }}\n      style={{\n        display: \"flex\",\n        gap: 12,\n      }}\n    >\n      <TextField\n        autoComplete=\"off\"\n        autoFocus\n        id={\"roomCode\"}\n        label={en.MainView.roomCodeLabel}\n        value={roomCode}\n        variant=\"standard\"\n        InputProps={{\n          endAdornment: (\n            <InputAdornment position=\"end\">\n              <Tooltip title={en.MainView.generateNewRoomCode}>\n                <IconButton\n                  aria-label={en.MainView.generateNewRoomCode}\n                  onClick={() => setRoomCode(createRandomRoomCode())}\n                >\n                  <Cached />\n                </IconButton>\n              </Tooltip>\n            </InputAdornment>\n          ),\n          readOnly: true,\n        }}\n      />\n      <Button type=\"submit\" variant=\"contained\" color=\"primary\">\n        {en.MainView.createRoom}\n      </Button>\n    </form>\n  );\n}\n","import { useLocation } from \"react-router-dom\";\n\nexport function useQuery() {\n  return new URLSearchParams(useLocation().search);\n}\n","import { en } from \"../../services/locale\";\nimport React, { useState } from \"react\";\nimport { useName } from \"../../business-logic/me\";\nimport { Button, TextField } from \"@material-ui/core\";\n\nexport function NameForm() {\n  const [name, saveName] = useName();\n  const [nameDraft, setNameDraft] = useState(name ?? \"\");\n  return (\n    <form\n      onSubmit={(event) => {\n        event.preventDefault();\n        saveName(nameDraft);\n      }}\n      style={{\n        display: \"flex\",\n        gap: 12,\n      }}\n    >\n      <TextField\n        autoComplete=\"off\"\n        id={\"name\"}\n        label={en.MainView.nameLabel}\n        value={nameDraft}\n        variant=\"filled\"\n        onChange={(event) => setNameDraft(event.target.value)}\n      />\n      <Button type=\"submit\" variant=\"contained\" color=\"primary\">\n        {en.MainView.saveName}\n      </Button>\n    </form>\n  );\n}\n","import React from \"react\";\nimport { Container, Typography } from \"@material-ui/core\";\nimport { RoomCodeForm } from \"./RoomCodeForm\";\nimport { NameForm } from \"./NameForm\";\nimport { useName } from \"../../business-logic/me\";\n\nexport function MainView() {\n  const [name] = useName();\n  return (\n    <Container>\n      <Typography variant=\"h3\" gutterBottom>\n        Hi {name ?? \"there\"}!\n      </Typography>\n      <div\n        style={{\n          display: \"flex\",\n          flexDirection: \"column\",\n          gap: 12,\n        }}\n      >\n        <NameForm />\n        {name && <RoomCodeForm />}\n      </div>\n    </Container>\n  );\n}\n","export function getMainPath(roomCode?: string) {\n  if (roomCode === undefined) {\n    return \"/\";\n  }\n  return `/?roomCode=${roomCode}`;\n}\n","import { Button, Container, Typography } from \"@material-ui/core\";\nimport React, { FunctionComponent } from \"react\";\nimport { NameForm } from \"../MainView/NameForm\";\nimport { en } from \"../../services/locale\";\nimport { useName } from \"../../business-logic/me\";\nimport { Link } from \"../../services/router\";\nimport { getWaitingRoomPath } from \"../WaitingRoomView/getWaitingRoomPath\";\n\nconst locale = en.JoinRoomView;\n\ninterface Props {\n  roomCode: string;\n}\n\nexport const JoinRoomView: FunctionComponent<Props> = ({ roomCode }) => {\n  const [name] = useName();\n  return (\n    <Container>\n      <Typography variant=\"h3\" gutterBottom>\n        {locale.heading}\n      </Typography>\n      <div\n        style={{\n          display: \"flex\",\n          alignItems: \"flex-start\",\n          flexDirection: \"column\",\n          gap: 12,\n        }}\n      >\n        <NameForm />\n        {name && (\n          <Button\n            color=\"primary\"\n            variant=\"contained\"\n            component={Link}\n            to={getWaitingRoomPath(roomCode)}\n          >\n            {locale.joinGame}\n          </Button>\n        )}\n      </div>\n    </Container>\n  );\n};\n","export function getInvitePath(roomCode: string) {\n  return `/invite/${roomCode}`;\n}\n","import {\n  ListItem,\n  ListItemIcon,\n  ListItemSecondaryAction,\n  ListItemText,\n  Tooltip,\n} from \"@material-ui/core\";\nimport { Home, Wifi, WifiOff } from \"@material-ui/icons\";\nimport { en } from \"../../services/locale\";\nimport React, { FunctionComponent } from \"react\";\nimport { Player } from \"../../business-logic/game\";\n\ninterface Props {\n  isHost: boolean;\n  player: Player;\n}\n\nexport const PlayerListItem: FunctionComponent<Props> = ({\n  player: { name, isOnline },\n  isHost,\n}) => {\n  return (\n    <ListItem>\n      <ListItemIcon>\n        {isOnline ? (\n          <Wifi aria-label={en.WaitingRoomView.online} />\n        ) : (\n          <WifiOff aria-label={en.WaitingRoomView.offline} color=\"error\" />\n        )}\n      </ListItemIcon>\n      <ListItemText primary={name} />\n      {isHost && (\n        <ListItemSecondaryAction>\n          <Tooltip title={en.WaitingRoomView.host}>\n            <Home aria-label={en.WaitingRoomView.host} />\n          </Tooltip>\n        </ListItemSecondaryAction>\n      )}\n    </ListItem>\n  );\n};\n","export function getGameRoomPath(roomCode: string) {\n  return `/game/${roomCode}`;\n}\n","import React, { FunctionComponent } from \"react\";\nimport {\n  Button,\n  Container,\n  Grid,\n  List,\n  ListSubheader,\n  Paper,\n  Typography,\n} from \"@material-ui/core\";\nimport { CopyToClipboard } from \"react-copy-to-clipboard\";\nimport { en } from \"../../services/locale\";\nimport { PlayerListItem } from \"./PlayerListItem\";\nimport { usePlayers } from \"../../business-logic/players\";\nimport { addOrUpdatePlayer } from \"../../business-logic/players/playersSlice\";\nimport { getInvitePath } from \"../JoinRoomView/getInvitePath\";\nimport { convertPathToUrl } from \"./convertPathToUrl\";\nimport { useDispatch } from \"../../business-logic/useDispatch\";\nimport { MockPlayer } from \"../../business-logic/game\";\nimport { useRoom } from \"./useRoom\";\nimport { useStartGame } from \"./useStartGame\";\nimport { selectIsHost } from \"../../business-logic/roomSettings\";\nimport { useSelector } from \"../../business-logic/useSelector\";\n\ninterface Props {\n  roomCode: string;\n}\n\nexport const WaitingRoomView: FunctionComponent<Props> = ({ roomCode }) => {\n  useRoom(roomCode);\n  const startGame = useStartGame(roomCode);\n  const isHost = useSelector(selectIsHost);\n\n  const players = usePlayers();\n  const dispatch = useDispatch();\n  return (\n    <Container>\n      <Grid container justify=\"space-between\" alignItems=\"center\">\n        <Grid item>\n          <Typography variant=\"h3\" gutterBottom>\n            Room\n          </Typography>\n        </Grid>\n        <Grid item>\n          <CopyToClipboard text={convertPathToUrl(getInvitePath(roomCode))}>\n            <Button variant=\"contained\" color=\"primary\">\n              {en.WaitingRoomView.copyInviteLink}\n            </Button>\n          </CopyToClipboard>\n        </Grid>\n      </Grid>\n      <Paper>\n        <List\n          subheader={\n            <ListSubheader>\n              {en.WaitingRoomView.playersListHeader}\n            </ListSubheader>\n          }\n        >\n          {players.map((player) => (\n            <PlayerListItem key={player.name} player={player} isHost />\n          ))}\n        </List>\n      </Paper>\n      {isHost && (\n        <Button onClick={startGame}>{en.WaitingRoomView.startGame}</Button>\n      )}\n      <Button onClick={() => dispatch(addOrUpdatePlayer(new MockPlayer()))}>\n        Add mock player\n      </Button>\n    </Container>\n  );\n};\n","import { useEffect } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { joinRoom, leaveRoom } from \"../../business-logic/game/gameSlice\";\n\nexport function useRoom(roomCode: string) {\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(joinRoom(roomCode));\n    return () => {\n      dispatch(leaveRoom());\n    };\n  }, [dispatch, roomCode]);\n}\n","export function convertPathToUrl(path: string) {\n  return `${window.location.protocol}//${window.location.host}${process.env.PUBLIC_URL}${path}`;\n}\n","import { usePlayers } from \"../../business-logic/players\";\nimport { useDispatch } from \"../../business-logic/useDispatch\";\nimport { useHistory } from \"../../services/router\";\nimport { startGame as startGameAction } from \"../../business-logic/game/gameSlice\";\nimport createRandomWords from \"random-words\";\nimport { getGameRoomPath } from \"../GameRoomView/getGameRoomPath\";\nimport words from \"../../wordLists/german.json\";\n\nexport function useStartGame(roomCode: string) {\n  const players = usePlayers();\n  const dispatch = useDispatch();\n  const { push } = useHistory();\n\n  return function startGame() {\n    dispatch(\n      startGameAction({\n        players,\n        seed: (createRandomWords(3) as string[]).join(\"-\"),\n        wordList: words,\n      })\n    );\n    push(getGameRoomPath(roomCode));\n  };\n}\n","import { useName } from \"../../business-logic/me\";\nimport { useSelector } from \"../../business-logic/useSelector\";\nimport { selectIsHost } from \"../../business-logic/roomSettings\";\nimport { Redirect } from \"../../services/router\";\nimport { getMainPath } from \"../MainView/getMainPath\";\nimport { getInvitePath } from \"../JoinRoomView/getInvitePath\";\nimport React from \"react\";\nimport { WaitingRoomView } from \"./WaitingRoomView\";\n\ninterface Props {\n  roomCode: string;\n}\n\nexport function WaitingRoomNameGuard({ roomCode }: Props) {\n  const [myName] = useName();\n  const isHost = useSelector(selectIsHost);\n\n  if (myName === null) {\n    if (isHost) {\n      return <Redirect to={getMainPath(roomCode)} />;\n    } else {\n      return <Redirect to={getInvitePath(roomCode)} />;\n    }\n  }\n\n  return <WaitingRoomView roomCode={roomCode} />;\n}\n","import { Card, CardContent, Typography } from \"@material-ui/core\";\nimport { en } from \"../../services/locale\";\nimport React from \"react\";\nimport { useMyWord } from \"../../business-logic/game\";\n\nexport function MyWord() {\n  const myWord = useMyWord();\n\n  const id = \"my-word-label\";\n  return (\n    <Card>\n      <CardContent>\n        <Typography gutterBottom id={id}>\n          {en.GameRoomView.myWordLabel}\n        </Typography>\n        <Typography aria-labelledby={id}>\n          {myWord ?? en.GameRoomView.youReTheQuestionMark}\n        </Typography>\n      </CardContent>\n    </Card>\n  );\n}\n","import { useSelector } from \"../useSelector\";\nimport { selectMyWord } from \"./gameSlice\";\n\nexport function useMyWord() {\n  return useSelector(selectMyWord);\n}\n","import React, { useState } from \"react\";\nimport { Button, Container, TextField, Typography } from \"@material-ui/core\";\nimport { en } from \"../../services/locale\";\nimport {\n  useAddFirstDescription,\n  useAddSecondDescription,\n} from \"../../business-logic/game\";\nimport { MyWord } from \"./MyWord\";\n\nexport interface Props {\n  onChoose: (description: string) => void;\n}\n\nfunction DescriptionForm({ onChoose }: Props) {\n  const [description, setDescription] = useState(\"\");\n  const [descriptionChosen, setDescriptionChosen] = useState(false);\n  return (\n    <form\n      noValidate\n      onSubmit={(event) => {\n        event.preventDefault();\n        onChoose(description);\n        setDescriptionChosen(true);\n      }}\n      style={{\n        display: \"flex\",\n        gap: 12,\n      }}\n    >\n      <TextField\n        disabled={descriptionChosen}\n        id=\"description\"\n        label={en.GameRoomView.describeYourWord}\n        value={description}\n        variant=\"filled\"\n        onChange={(event) => setDescription(event.target.value)}\n      />\n      <Button\n        disabled={descriptionChosen}\n        type=\"submit\"\n        variant=\"contained\"\n        color=\"primary\"\n      >\n        {descriptionChosen ? \"Waiting for other players\" : \"Choose this word\"}\n      </Button>\n    </form>\n  );\n}\n\nexport function AddDescriptionView({ onChoose }: Props) {\n  return (\n    <Container>\n      <Typography variant=\"h3\" gutterBottom>\n        Game\n      </Typography>\n      <MyWord />\n      <DescriptionForm onChoose={onChoose} />\n    </Container>\n  );\n}\n\nexport function AddFirstDescriptionView() {\n  const addFirstDescription = useAddFirstDescription();\n  return <AddDescriptionView onChoose={addFirstDescription} />;\n}\n\nexport function AddSecondDescriptionView() {\n  const addSecondDescription = useAddSecondDescription();\n  return <AddDescriptionView onChoose={addSecondDescription} />;\n}\n","import { addFirstDescriptionToPlayer } from \"./gameSlice\";\nimport { useDispatchWithId } from \"./useDispatchWithId\";\n\nexport function useAddFirstDescription() {\n  return useDispatchWithId((id, description: string) =>\n    addFirstDescriptionToPlayer({ description, id })\n  );\n}\n","import { addSecondDescriptionToPlayer } from \"./gameSlice\";\nimport { useDispatchWithId } from \"./useDispatchWithId\";\n\nexport function useAddSecondDescription() {\n  return useDispatchWithId((id, description: string) =>\n    addSecondDescriptionToPlayer({ description, id })\n  );\n}\n","import React, { ChangeEvent, useState } from \"react\";\nimport {\n  Button,\n  Checkbox,\n  Container,\n  FormControl,\n  FormControlLabel,\n  FormGroup,\n  FormLabel,\n  Typography,\n} from \"@material-ui/core\";\nimport {\n  Guess,\n  Player,\n  useAddFirstGuess,\n  useAddSecondGuess,\n} from \"../../business-logic/game\";\nimport { usePlayers } from \"../../business-logic/players\";\nimport { MyWord } from \"./MyWord\";\n\nfunction AddGuessView({ onChoose }: { onChoose: (guess: Guess) => void }) {\n  const [guess, setGuess] = useState<Player[\"id\"][]>([]);\n  const players = usePlayers();\n  const onChange = (event: ChangeEvent<HTMLInputElement>, checked: boolean) =>\n    checked\n      ? setGuess((guess) => [...guess, event.target.name])\n      : setGuess((guess) => guess.filter((id) => id !== event.target.name));\n  return (\n    <Container>\n      <Typography variant=\"h3\" gutterBottom>\n        Game\n      </Typography>\n      <MyWord />\n      <form\n        noValidate\n        onSubmit={(event) => {\n          event.preventDefault();\n          if (guess.length !== 2) return;\n          onChoose(guess as Guess);\n        }}\n      >\n        <FormControl required component=\"fieldset\">\n          <FormLabel component=\"legend\">Pick two</FormLabel>\n          <FormGroup>\n            {players.map((player) => (\n              <FormControlLabel\n                control={\n                  <Checkbox\n                    checked={guess.includes(player.id)}\n                    onChange={onChange}\n                    name={player.id}\n                  />\n                }\n                key={player.id}\n                label={player.name}\n              />\n            ))}\n          </FormGroup>\n        </FormControl>\n        <Button type=\"submit\" disabled={guess.length !== 2}>\n          Guess\n        </Button>\n      </form>\n    </Container>\n  );\n}\n\nexport function AddFirstGuessView() {\n  const addFirstGuess = useAddFirstGuess();\n  return <AddGuessView onChoose={addFirstGuess} />;\n}\n\nexport function AddSecondGuessView() {\n  const addSecondGuess = useAddSecondGuess();\n  return <AddGuessView onChoose={addSecondGuess} />;\n}\n","import { Guess } from \"./Player\";\nimport { addFirstGuessToPlayer } from \"./gameSlice\";\nimport { useDispatchWithId } from \"./useDispatchWithId\";\n\nexport function useAddFirstGuess() {\n  return useDispatchWithId((id, guess: Guess) =>\n    addFirstGuessToPlayer({ guess, id })\n  );\n}\n","import { Guess } from \"./Player\";\nimport { addSecondGuessToPlayer } from \"./gameSlice\";\nimport { useDispatchWithId } from \"./useDispatchWithId\";\n\nexport function useAddSecondGuess() {\n  return useDispatchWithId((id, guess: Guess) =>\n    addSecondGuessToPlayer({ guess, id })\n  );\n}\n","import React, { FunctionComponent } from \"react\";\nimport { usePlayers } from \"../../business-logic/game\";\nimport { Container, Typography } from \"@material-ui/core\";\nimport { MyWord } from \"./MyWord\";\n\nexport const RoundSummaryView: FunctionComponent = () => {\n  const players = usePlayers();\n  return (\n    <Container>\n      <Typography variant=\"h3\" gutterBottom>\n        Game\n      </Typography>\n      <MyWord />\n      {players.map((player) => (\n        <pre key={player.id}>{JSON.stringify(player)}</pre>\n      ))}\n    </Container>\n  );\n};\n","import { useSelector } from \"../useSelector\";\nimport { selectPlayers } from \"./gameSlice\";\nimport { calculateMyPoints } from \"./calculateMyPoints\";\n\nexport function usePlayers() {\n  const players = useSelector(selectPlayers);\n  return players.map((player) => ({\n    ...player,\n    points: calculateMyPoints(player, players),\n  }));\n}\n","import React, { FunctionComponent } from \"react\";\nimport { Status, useStatus } from \"../../business-logic/game\";\nimport {\n  AddFirstDescriptionView,\n  AddSecondDescriptionView,\n} from \"./AddDescriptionView\";\nimport { AddFirstGuessView, AddSecondGuessView } from \"./AddGuessView\";\nimport { RoundSummaryView } from \"./RoundSummaryView\";\nimport { getMainPath } from \"../MainView/getMainPath\";\nimport { Redirect } from \"../../services/router\";\n\nexport const GameRoomView: FunctionComponent = () => {\n  const status = useStatus();\n\n  switch (status) {\n    case Status.WaitingForGameStart:\n      return <Redirect to={getMainPath()} />;\n    case Status.ChoosingFirstDescription:\n      return <AddFirstDescriptionView />;\n    case Status.GuessingFirstTeam:\n      return <AddFirstGuessView />;\n    case Status.ChoosingSecondDescription:\n      return <AddSecondDescriptionView />;\n    case Status.GuessingSecondTeam:\n      return <AddSecondGuessView />;\n    case Status.GameOver:\n      return <RoundSummaryView />;\n  }\n};\n","import { useSelector } from \"../useSelector\";\nimport { selectStatus } from \"./gameSlice\";\n\nexport function useStatus() {\n  return useSelector(selectStatus);\n}\n","import React from \"react\";\nimport { MainView } from \"./views/MainView/MainView\";\nimport \"fontsource-roboto\";\nimport { Route, Switch } from \"./services/router\";\nimport { getWaitingRoomPath } from \"./views/WaitingRoomView/getWaitingRoomPath\";\nimport { getMainPath } from \"./views/MainView/getMainPath\";\nimport { JoinRoomView } from \"./views/JoinRoomView/JoinRoomView\";\nimport { getInvitePath } from \"./views/JoinRoomView/getInvitePath\";\nimport { WaitingRoomNameGuard } from \"./views/WaitingRoomView/WaitingRoomNameGuard\";\nimport { getGameRoomPath } from \"./views/GameRoomView/getGameRoomPath\";\nimport { GameRoomView } from \"./views/GameRoomView/GameRoomView\";\n\nexport function App() {\n  return (\n    <Switch>\n      <Route path={getWaitingRoomPath(\":roomCode\")}>\n        {({ match }) => (\n          <WaitingRoomNameGuard roomCode={match!.params.roomCode!} />\n        )}\n      </Route>\n      <Route path={getInvitePath(\":roomCode\")}>\n        {({ match }) => <JoinRoomView roomCode={match!.params.roomCode!} />}\n      </Route>\n      <Route path={getGameRoomPath(\":roomCode\")}>\n        <GameRoomView />\n      </Route>\n      <Route path={getMainPath()}>\n        <MainView />\n      </Route>\n    </Switch>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Connection } from \"./Connection\";\nimport { App } from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Connection>\n      <App />\n    </Connection>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}