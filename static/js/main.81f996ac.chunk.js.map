{"version":3,"sources":["serviceWorker.ts","name/nameSlice.ts","localStorage/index.ts","store/useDispatch.ts","store/useSelector.ts","name/useName.ts","players/playersSlice.ts","roomSettings/roomSettingsSlice.ts","store/store.ts","MainView/useRandomRoomCode.ts","RoomView/getRoomPath.ts","MainView/RoomCodeForm.tsx","router/useQuery.ts","MainView/NameForm.tsx","MainView/MainView.tsx","MainView/getMainPath.ts","RoomView/PlayerListItem.tsx","RoomView/RoomView.tsx","players/usePlayers.ts","App.tsx","ConnectedApp.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","initialState","key","localStorage","getItem","getFromLocalStorage","nameSlice","createSlice","name","reducers","setName","state","action","payload","selectName","actions","reducer","useDispatch","useUntypedDispatch","useSelector","useUntypedSelector","useName","dispatch","newName","value","setItem","setNameAction","playersSlice","selectPlayers","isOnline","concat","players","roomSettingsSlice","isHost","setHost","createStore","preloadedState","configureStore","nameReducer","playersReducer","roomSettings","roomSettingsReducer","createRandomRoomCode","createRandomWords","join","getRoomPath","roomCode","RoomCodeForm","push","useHistory","randomRoomCode","useState","useRandomRoomCode","query","URLSearchParams","useLocation","search","roomCodeFromQuery","get","setRoomCode","onSubmit","event","preventDefault","style","display","gap","TextField","autoComplete","autoFocus","id","label","en","MainView","roomCodeLabel","variant","InputProps","endAdornment","InputAdornment","position","Tooltip","title","generateNewRoomCode","IconButton","aria-label","onClick","Cached","readOnly","Button","type","color","createRoom","NameForm","saveName","nameDraft","setNameDraft","nameLabel","onChange","target","Container","Typography","gutterBottom","flexDirection","getMainPath","undefined","PlayerListItem","player","ListItem","ListItemIcon","Wifi","RoomView","online","WifiOff","offline","ListItemText","primary","ListItemSecondaryAction","host","Home","myName","to","Grid","container","justify","alignItems","item","text","process","copyInviteLink","Paper","List","subheader","ListSubheader","playersListHeader","map","App","path","params","ConnectedApp","basename","store","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.81f996ac.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === \"[::1]\" ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n            \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker.register(swUrl).then(registration => {\n    registration.onupdatefound = () => {\n      const installingWorker = registration.installing;\n      if (installingWorker == null) {\n        return;\n      }\n      installingWorker.onstatechange = () => {\n        if (installingWorker.state === \"installed\") {\n          if (navigator.serviceWorker.controller) {\n            // At this point, the updated precached content has been fetched,\n            // but the previous service worker will still serve the older\n            // content until all client tabs are closed.\n            console.log(\n              \"New content is available and will be used when all \" +\n              \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n            );\n\n            // Execute callback\n            if (config && config.onUpdate) {\n              config.onUpdate(registration);\n            }\n          } else {\n            // At this point, everything has been precached.\n            // It's the perfect time to display a\n            // \"Content is cached for offline use.\" message.\n            console.log(\"Content is cached for offline use.\");\n\n            // Execute callback\n            if (config && config.onSuccess) {\n              config.onSuccess(registration);\n            }\n          }\n        }\n      };\n    };\n  }).catch(error => {\n    console.error(\"Error during service worker registration:\", error);\n  });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" }\n  }).then(response => {\n    // Ensure service worker exists, and that we really are getting a JS file.\n    const contentType = response.headers.get(\"content-type\");\n    if (\n      response.status === 404 ||\n      (contentType != null && contentType.indexOf(\"javascript\") === -1)\n    ) {\n      // No service worker found. Probably a different app. Reload the page.\n      navigator.serviceWorker.ready.then(registration => {\n        registration.unregister().then(() => {\n          window.location.reload();\n        });\n      });\n    } else {\n      // Service worker found. Proceed as normal.\n      registerValidSW(swUrl, config);\n    }\n  }).catch(() => {\n    console.log(\n      \"No internet connection found. App is running in offline mode.\"\n    );\n  });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    }).catch(error => {\n      console.error(error.message);\n    });\n  }\n}\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { RootState } from \"../store/store\";\nimport { getFromLocalStorage } from \"../localStorage\";\n\ntype NameState = string | null;\n\nconst initialState: NameState = getFromLocalStorage(\"name\");\n\nexport const nameSlice = createSlice({\n  name: \"name\",\n  initialState,\n  reducers: {\n    setName: (state, action: PayloadAction<string>) => action.payload,\n  },\n});\n\nexport const selectName = (state: RootState) => state.name;\n\nexport const { setName } = nameSlice.actions;\nexport const reducer = nameSlice.reducer;\n","export function saveToLocalStorage(key: string, value: string) {\n  localStorage.setItem(`qnot/${key}`, value);\n}\n\nexport function getFromLocalStorage(key: string): string | null {\n  return localStorage.getItem(`qnot/${key}`) ?? null;\n}\n","import { useDispatch as useUntypedDispatch } from \"react-redux\";\nimport { Store } from \"./store\";\n\nexport const useDispatch = () => useUntypedDispatch<Store[\"dispatch\"]>();\n","import {\n  TypedUseSelectorHook,\n  useSelector as useUntypedSelector,\n} from \"react-redux\";\nimport { RootState } from \"./store\";\n\nexport const useSelector: TypedUseSelectorHook<RootState> = useUntypedSelector;\n","import { useDispatch } from \"../store/useDispatch\";\nimport { selectName, setName as setNameAction } from \"./nameSlice\";\nimport { useSelector } from \"../store/useSelector\";\nimport { saveToLocalStorage } from \"../localStorage\";\n\nexport function useName() {\n  const name = useSelector(selectName);\n  const dispatch = useDispatch();\n  const setName = (newName: string) => {\n    saveToLocalStorage(\"name\", newName);\n    dispatch(setNameAction(newName));\n  };\n  return [name, setName] as const;\n}\n","import { createSlice } from \"@reduxjs/toolkit\";\nimport { RootState } from \"../store/store\";\nimport { selectName } from \"../name\";\nimport { Player } from \"./Player\";\n\ntype PlayersState = Player[];\n\nconst initialState: PlayersState = [];\n\nexport const playersSlice = createSlice({\n  name: \"players\",\n  initialState,\n  reducers: {},\n});\n\nexport const selectPlayers = (state: RootState) =>\n  [{ name: selectName(state), isOnline: true }].concat(state.players);\n\nexport const reducer = playersSlice.reducer;\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { RootState } from \"../store/store\";\n\ninterface RoomSettingsState {\n  isHost: boolean;\n}\n\nconst initialState: RoomSettingsState = {\n  isHost: false,\n};\n\nexport const roomSettingsSlice = createSlice({\n  name: \"roomSettings\",\n  initialState,\n  reducers: {\n    setHost: (state, action: PayloadAction<boolean>) => ({\n      ...state,\n      isHost: action.payload,\n    }),\n  },\n});\n\nexport const { setHost } = roomSettingsSlice.actions;\nexport const selectRoomSettings = (state: RootState) => state.roomSettings;\nexport const selectIsHost = (state: RootState) =>\n  selectRoomSettings(state).isHost;\n\nexport const reducer = roomSettingsSlice.reducer;\n","import { configureStore, ConfigureStoreOptions } from \"@reduxjs/toolkit\";\nimport { reducer as nameReducer } from \"../name/\";\nimport { reducer as playersReducer } from \"../players\";\nimport { reducer as roomSettingsReducer } from \"../roomSettings\";\n\nexport function createStore({\n  preloadedState,\n}: Omit<ConfigureStoreOptions, \"reducer\"> = {}) {\n  return configureStore({\n    preloadedState,\n    reducer: {\n      name: nameReducer,\n      players: playersReducer,\n      roomSettings: roomSettingsReducer,\n    },\n  });\n}\n\nexport type Store = ReturnType<typeof createStore>;\nexport type RootState = ReturnType<Store[\"getState\"]>;\n","import { useState } from \"react\";\nimport createRandomWords from \"random-words\";\n\nexport function createRandomRoomCode() {\n  return (createRandomWords(3) as string[]).join(\"-\");\n}\n\nexport function useRandomRoomCode() {\n  const [roomCode] = useState(() => createRandomRoomCode());\n  return roomCode;\n}\n","export function getRoomPath(roomCode: string) {\n  return `/room/${roomCode}`;\n}\n","import { createRandomRoomCode, useRandomRoomCode } from \"./useRandomRoomCode\";\nimport { useHistory, useQuery } from \"../router\";\nimport { getRoomPath } from \"../RoomView/getRoomPath\";\nimport { en } from \"../locale\";\nimport React, { useState } from \"react\";\nimport {\n  Button,\n  IconButton,\n  InputAdornment,\n  TextField,\n  Tooltip,\n} from \"@material-ui/core\";\nimport { Cached } from \"@material-ui/icons\";\nimport { useDispatch } from \"../store/useDispatch\";\nimport { setHost } from \"../roomSettings\";\n\nexport function RoomCodeForm() {\n  const { push } = useHistory();\n  const randomRoomCode = useRandomRoomCode();\n  const query = useQuery();\n  const dispatch = useDispatch();\n\n  const roomCodeFromQuery = query.get(\"roomCode\");\n  const [roomCode, setRoomCode] = useState(roomCodeFromQuery ?? randomRoomCode);\n\n  return (\n    <form\n      onSubmit={(event) => {\n        event.preventDefault();\n        dispatch(setHost(true));\n        push(getRoomPath(roomCode));\n      }}\n      style={{\n        display: \"flex\",\n        gap: 12,\n      }}\n    >\n      <TextField\n        autoComplete=\"off\"\n        autoFocus\n        id={\"roomCode\"}\n        label={en.MainView.roomCodeLabel}\n        value={roomCode}\n        variant=\"standard\"\n        InputProps={{\n          endAdornment: (\n            <InputAdornment position=\"end\">\n              <Tooltip title={en.MainView.generateNewRoomCode}>\n                <IconButton\n                  aria-label={en.MainView.generateNewRoomCode}\n                  onClick={() => setRoomCode(createRandomRoomCode())}\n                >\n                  <Cached />\n                </IconButton>\n              </Tooltip>\n            </InputAdornment>\n          ),\n          readOnly: true,\n        }}\n      />\n      <Button type=\"submit\" variant=\"contained\" color=\"primary\">\n        {en.MainView.createRoom}\n      </Button>\n    </form>\n  );\n}\n","import { useLocation } from \"react-router-dom\";\n\nexport function useQuery() {\n  return new URLSearchParams(useLocation().search);\n}\n","import { en } from \"../locale\";\nimport React, { useState } from \"react\";\nimport { useName } from \"../name\";\nimport { Button, TextField } from \"@material-ui/core\";\n\nexport function NameForm() {\n  const [name, saveName] = useName();\n  const [nameDraft, setNameDraft] = useState(name ?? \"\");\n  return (\n    <form\n      onSubmit={(event) => {\n        event.preventDefault();\n        saveName(nameDraft);\n      }}\n      style={{\n        display: \"flex\",\n        gap: 12,\n      }}\n    >\n      <TextField\n        autoComplete=\"off\"\n        id={\"name\"}\n        label={en.MainView.nameLabel}\n        value={nameDraft}\n        variant=\"filled\"\n        onChange={(event) => setNameDraft(event.target.value)}\n      />\n      <Button type=\"submit\" variant=\"contained\" color=\"primary\">\n        {en.MainView.saveName}\n      </Button>\n    </form>\n  );\n}\n","import React from \"react\";\nimport { Container, Typography } from \"@material-ui/core\";\nimport { RoomCodeForm } from \"./RoomCodeForm\";\nimport { NameForm } from \"./NameForm\";\nimport { useName } from \"../name\";\n\nexport function MainView() {\n  const [name] = useName();\n  return (\n    <Container>\n      <Typography variant=\"h3\" gutterBottom>\n        Hi {name ?? \"there\"}!\n      </Typography>\n      <div\n        style={{\n          display: \"flex\",\n          flexDirection: \"column\",\n          gap: 12,\n        }}\n      >\n        <NameForm />\n        {name && <RoomCodeForm />}\n      </div>\n    </Container>\n  );\n}\n","export function getMainPath(roomCode?: string) {\n  if (roomCode === undefined) {\n    return \"/\";\n  }\n  return `/?roomCode=${roomCode}`;\n}\n","import {\n  ListItem,\n  ListItemIcon,\n  ListItemSecondaryAction,\n  ListItemText,\n  Tooltip,\n} from \"@material-ui/core\";\nimport { Home, Wifi, WifiOff } from \"@material-ui/icons\";\nimport { en } from \"../locale\";\nimport React, { FunctionComponent } from \"react\";\nimport { Player } from \"../players\";\n\ninterface Props {\n  isHost: boolean;\n  player: Player;\n}\n\nexport const PlayerListItem: FunctionComponent<Props> = ({\n  player: { name, isOnline },\n  isHost,\n}) => {\n  return (\n    <ListItem>\n      <ListItemIcon>\n        {isOnline ? (\n          <Wifi aria-label={en.RoomView.online} />\n        ) : (\n          <WifiOff aria-label={en.RoomView.offline} color=\"error\" />\n        )}\n      </ListItemIcon>\n      <ListItemText primary={name} />\n      {isHost && (\n        <ListItemSecondaryAction>\n          <Tooltip title={en.RoomView.host}>\n            <Home aria-label={en.RoomView.host} />\n          </Tooltip>\n        </ListItemSecondaryAction>\n      )}\n    </ListItem>\n  );\n};\n","import React from \"react\";\nimport { Redirect } from \"../router\";\nimport {\n  Button,\n  Container,\n  Grid,\n  List,\n  ListSubheader,\n  Paper,\n  Typography,\n} from \"@material-ui/core\";\nimport { CopyToClipboard } from \"react-copy-to-clipboard\";\nimport { getMainPath } from \"../MainView/getMainPath\";\nimport { en } from \"../locale\";\nimport { useName } from \"../name\";\nimport { PlayerListItem } from \"./PlayerListItem\";\nimport { usePlayers } from \"../players\";\n\ninterface Props {\n  roomCode: string;\n}\n\nexport function RoomView({ roomCode }: Props) {\n  const [myName] = useName();\n  const players = usePlayers();\n  if (myName === null) {\n    return <Redirect to={getMainPath(roomCode)} />;\n  }\n\n  return (\n    <Container>\n      <Grid container justify=\"space-between\" alignItems=\"center\">\n        <Grid item>\n          <Typography variant=\"h3\" gutterBottom>\n            Room\n          </Typography>\n        </Grid>\n        <Grid item>\n          <CopyToClipboard\n            text={`${process.env.PUBLIC_URL}${getMainPath(roomCode)}`}\n          >\n            <Button variant=\"contained\" color=\"primary\">\n              {en.RoomView.copyInviteLink}\n            </Button>\n          </CopyToClipboard>\n        </Grid>\n      </Grid>\n      <Paper>\n        <List\n          subheader={\n            <ListSubheader>{en.RoomView.playersListHeader}</ListSubheader>\n          }\n        >\n          {players.map((player) => (\n            <PlayerListItem key={player.name} player={player} isHost />\n          ))}\n        </List>\n      </Paper>\n    </Container>\n  );\n}\n","import { selectPlayers } from \"./playersSlice\";\nimport { useSelector } from \"../store/useSelector\";\n\nexport function usePlayers() {\n  return useSelector(selectPlayers);\n}\n","import React from \"react\";\nimport { MainView } from \"./MainView/MainView\";\nimport \"fontsource-roboto\";\nimport { Route, Switch } from \"./router\";\nimport { getRoomPath } from \"./RoomView/getRoomPath\";\nimport { RoomView } from \"./RoomView/RoomView\";\nimport { getMainPath } from \"./MainView/getMainPath\";\n\nexport function App() {\n  return (\n    <Switch>\n      <Route path={getRoomPath(\":roomCode\")}>\n        {({ match }) => <RoomView roomCode={match!.params.roomCode!} />}\n      </Route>\n      <Route path={getMainPath()}>\n        <MainView />\n      </Route>\n    </Switch>\n  );\n}\n","import { BrowserRouter } from \"./router\";\nimport { Provider } from \"react-redux\";\nimport { createStore } from \"./store/store\";\nimport { App } from \"./App\";\nimport React from \"react\";\n\nexport const ConnectedApp = () => (\n  <BrowserRouter basename={process.env.PUBLIC_URL}>\n    <Provider store={createStore()}>\n      <App />\n    </Provider>\n  </BrowserRouter>\n);\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { ConnectedApp } from \"./ConnectedApp\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <ConnectedApp />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}