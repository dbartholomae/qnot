{"version":3,"sources":["serviceWorker.ts","name/nameSlice.ts","store/store.ts","RoomView/getRoomPath.ts","components/TextFieldForm.tsx","store/useDispatch.ts","store/useSelector.ts","MainView/MainView.tsx","MainView/useRandomRoomCode.ts","useQuery.ts","MainView/getMainPath.ts","RoomView/RoomView.tsx","App.tsx","ConnectedApp.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","nameSlice","createSlice","name","initialState","reducers","setName","state","action","payload","actions","selectName","createStore","preloadedState","configureStore","reducer","nameReducer","getRoomPath","roomCode","TextFieldForm","onConfirmValue","id","initialValue","label","confirmLabel","useState","value","setValue","onSubmit","event","preventDefault","style","display","gap","TextField","autoComplete","variant","onChange","target","Button","type","color","useSelector","useUntypedSelector","MainView","push","useHistory","dispatch","useUntypedDispatch","randomRoomCode","createRandomWords","join","useRandomRoomCode","roomCodeFromQuery","URLSearchParams","useLocation","search","get","Container","Typography","gutterBottom","flexDirection","newName","setNameAction","en","nameLabel","saveName","roomCodeLabel","joinRoom","getMainPath","undefined","RoomView","homepage","inAppPathname","pathname","protocol","host","fullPathname","slice","length","useHomepage","myName","to","text","copyInviteLink","Wifi","aria-label","online","App","path","params","basename","ConnectedApp","store","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d4bd10eb.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === \"[::1]\" ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n            \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker.register(swUrl).then(registration => {\n    registration.onupdatefound = () => {\n      const installingWorker = registration.installing;\n      if (installingWorker == null) {\n        return;\n      }\n      installingWorker.onstatechange = () => {\n        if (installingWorker.state === \"installed\") {\n          if (navigator.serviceWorker.controller) {\n            // At this point, the updated precached content has been fetched,\n            // but the previous service worker will still serve the older\n            // content until all client tabs are closed.\n            console.log(\n              \"New content is available and will be used when all \" +\n              \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n            );\n\n            // Execute callback\n            if (config && config.onUpdate) {\n              config.onUpdate(registration);\n            }\n          } else {\n            // At this point, everything has been precached.\n            // It's the perfect time to display a\n            // \"Content is cached for offline use.\" message.\n            console.log(\"Content is cached for offline use.\");\n\n            // Execute callback\n            if (config && config.onSuccess) {\n              config.onSuccess(registration);\n            }\n          }\n        }\n      };\n    };\n  }).catch(error => {\n    console.error(\"Error during service worker registration:\", error);\n  });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" }\n  }).then(response => {\n    // Ensure service worker exists, and that we really are getting a JS file.\n    const contentType = response.headers.get(\"content-type\");\n    if (\n      response.status === 404 ||\n      (contentType != null && contentType.indexOf(\"javascript\") === -1)\n    ) {\n      // No service worker found. Probably a different app. Reload the page.\n      navigator.serviceWorker.ready.then(registration => {\n        registration.unregister().then(() => {\n          window.location.reload();\n        });\n      });\n    } else {\n      // Service worker found. Proceed as normal.\n      registerValidSW(swUrl, config);\n    }\n  }).catch(() => {\n    console.log(\n      \"No internet connection found. App is running in offline mode.\"\n    );\n  });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    }).catch(error => {\n      console.error(error.message);\n    });\n  }\n}\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { RootState } from \"../store/store\";\n\ntype NameState = string | null;\n\nconst initialState: NameState = null as NameState;\n\nexport const nameSlice = createSlice({\n  name: \"name\",\n  initialState,\n  reducers: {\n    setName: (state, action: PayloadAction<string>) => action.payload,\n  },\n});\n\nexport const { setName } = nameSlice.actions;\n\nexport const selectName = (state: RootState) => state.name;\n\nexport default nameSlice.reducer;\n","import { configureStore, ConfigureStoreOptions } from \"@reduxjs/toolkit\";\nimport nameReducer from \"../name/nameSlice\";\n\nexport function createStore({\n  preloadedState,\n}: Omit<ConfigureStoreOptions, \"reducer\"> = {}) {\n  return configureStore({\n    preloadedState,\n    reducer: {\n      name: nameReducer,\n    },\n  });\n}\n\nexport type Store = ReturnType<typeof createStore>;\nexport type RootState = ReturnType<Store[\"getState\"]>;\n","export function getRoomPath(roomCode: string) {\n  return `/room/${roomCode}`;\n}\n","import React, { useState } from \"react\";\nimport { Button, TextField } from \"@material-ui/core\";\n\ninterface Props {\n  onConfirmValue: (name: string) => void;\n  id: string;\n  label: string;\n  confirmLabel: string;\n  initialValue?: string;\n}\n\nexport const TextFieldForm = ({\n  onConfirmValue,\n  id,\n  initialValue = \"\",\n  label,\n  confirmLabel,\n}: Props) => {\n  const [value, setValue] = useState(initialValue);\n  return (\n    <form\n      onSubmit={(event) => {\n        event.preventDefault();\n        onConfirmValue(value);\n      }}\n      style={{\n        display: \"flex\",\n        gap: 12,\n      }}\n    >\n      <TextField\n        autoComplete=\"off\"\n        id={id}\n        label={label}\n        value={value}\n        variant=\"filled\"\n        onChange={(event) => setValue(event.target.value)}\n      />\n      <Button type=\"submit\" variant=\"contained\" color=\"primary\">\n        {confirmLabel}\n      </Button>\n    </form>\n  );\n};\n","import { useDispatch as useUntypedDispatch } from \"react-redux\";\nimport { Store } from \"./store\";\n\nexport const useDispatch = () => useUntypedDispatch<Store[\"dispatch\"]>();\n","import {\n  TypedUseSelectorHook,\n  useSelector as useUntypedSelector,\n} from \"react-redux\";\nimport { RootState } from \"./store\";\n\nexport const useSelector: TypedUseSelectorHook<RootState> = useUntypedSelector;\n","import { useHistory } from \"react-router-dom\";\nimport React from \"react\";\nimport { Container, Typography } from \"@material-ui/core\";\nimport { getRoomPath } from \"../RoomView/getRoomPath\";\nimport { TextFieldForm } from \"../components/TextFieldForm\";\nimport { en } from \"../locale\";\nimport { useRandomRoomCode } from \"./useRandomRoomCode\";\nimport { selectName, setName as setNameAction } from \"../name/nameSlice\";\nimport { useQuery } from \"../useQuery\";\nimport { useDispatch } from \"../store/useDispatch\";\nimport { useSelector } from \"../store/useSelector\";\n\nexport function MainView() {\n  const { push } = useHistory();\n  const name = useSelector(selectName);\n  const dispatch = useDispatch();\n  const setName = (newName: string) => dispatch(setNameAction(newName));\n  const randomRoomCode = useRandomRoomCode();\n  const query = useQuery();\n  const roomCodeFromQuery = query.get(\"roomCode\");\n  return (\n    <Container>\n      <Typography variant=\"h3\" gutterBottom>\n        Hi {name ?? \"there\"}!\n      </Typography>\n      <div\n        style={{\n          display: \"flex\",\n          flexDirection: \"column\",\n          gap: 12,\n        }}\n      >\n        <TextFieldForm\n          onConfirmValue={setName}\n          id=\"name\"\n          label={en.MainView.nameLabel}\n          confirmLabel={en.MainView.saveName}\n        />\n        {name && (\n          <TextFieldForm\n            onConfirmValue={(roomCode) => push(getRoomPath(roomCode))}\n            id=\"roomCode\"\n            initialValue={roomCodeFromQuery ?? randomRoomCode}\n            label={en.MainView.roomCodeLabel}\n            confirmLabel={en.MainView.joinRoom}\n          />\n        )}\n      </div>\n    </Container>\n  );\n}\n","import { useState } from \"react\";\nimport createRandomWords from \"random-words\";\n\nexport function useRandomRoomCode() {\n  const [roomCode] = useState(() =>\n    (createRandomWords(3) as string[]).join(\"-\")\n  );\n  return roomCode;\n}\n","import { useLocation } from \"react-router-dom\";\n\nexport function useQuery() {\n  return new URLSearchParams(useLocation().search);\n}\n","export function getMainPath(roomCode?: string) {\n  if (roomCode === undefined) {\n    return \"/\";\n  }\n  return `/?roomCode=${roomCode}`;\n}\n","import React from \"react\";\nimport { Redirect, useLocation } from \"react-router-dom\";\nimport { Button, Container, Typography } from \"@material-ui/core\";\nimport { CopyToClipboard } from \"react-copy-to-clipboard\";\nimport { selectName } from \"../name/nameSlice\";\nimport { getMainPath } from \"../MainView/getMainPath\";\nimport { useSelector } from \"../store/useSelector\";\nimport { Wifi } from \"@material-ui/icons\";\nimport { en } from \"../locale\";\nimport { getRoomPath } from \"./getRoomPath\";\n\ninterface Props {\n  roomCode: string;\n}\n\nfunction useHomepage() {\n  const { pathname: inAppPathname } = useLocation();\n  const { protocol, host, pathname: fullPathname } = window.location;\n  return `${protocol}//${host}${fullPathname.slice(\n    0,\n    fullPathname.length - inAppPathname.length\n  )}`;\n}\n\nexport function RoomView({ roomCode }: Props) {\n  const homepage = useHomepage();\n  const myName = useSelector(selectName);\n  if (myName === null) {\n    return <Redirect to={getMainPath(roomCode)} />;\n  }\n\n  return (\n    <Container>\n      <Typography variant=\"h3\">Room</Typography>\n      <CopyToClipboard text={`${homepage}${getRoomPath(roomCode)}`}>\n        <Button variant=\"contained\" color=\"primary\">\n          {en.RoomView.copyInviteLink}\n        </Button>\n      </CopyToClipboard>\n      <Typography variant=\"body1\">{roomCode}</Typography>\n      <Wifi aria-label={en.RoomView.online} />\n      <Typography variant=\"body1\">{myName}</Typography>\n    </Container>\n  );\n}\n","import React from \"react\";\nimport { MainView } from \"./MainView/MainView\";\nimport \"fontsource-roboto\";\nimport { Route, Switch } from \"react-router-dom\";\nimport { getRoomPath } from \"./RoomView/getRoomPath\";\nimport { RoomView } from \"./RoomView/RoomView\";\nimport { getMainPath } from \"./MainView/getMainPath\";\n\nexport function App() {\n  return (\n    <Switch>\n      <Route path={getRoomPath(\":roomCode\")}>\n        {({ match }) => <RoomView roomCode={match!.params.roomCode} />}\n      </Route>\n      <Route path={getMainPath()}>\n        <MainView />\n      </Route>\n    </Switch>\n  );\n}\n","import { BrowserRouter } from \"react-router-dom\";\nimport { Provider } from \"react-redux\";\nimport { createStore } from \"./store/store\";\nimport { App } from \"./App\";\nimport React from \"react\";\n\nconst basename = window.location.pathname;\n\nexport const ConnectedApp = () => (\n  <BrowserRouter basename={basename}>\n    <Provider store={createStore()}>\n      <App />\n    </Provider>\n  </BrowserRouter>\n);\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { ConnectedApp } from \"./ConnectedApp\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <ConnectedApp />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}