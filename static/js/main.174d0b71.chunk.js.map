{"version":3,"sources":["business-logic/game/useAddFirstDescription.ts","business-logic/game/useAddFirstGuess.ts","business-logic/game/useAddSecondDescription.ts","business-logic/game/useAddSecondGuess.ts","business-logic/game/useMyWord.ts","business-logic/game/usePlayers.ts","business-logic/game/useStatus.ts","business-logic/game/chooseWordsForPlayers.ts","business-logic/game/calculateMyPoints.ts","business-logic/game/gameSlice.ts","serviceWorker.ts","business-logic/me/useName.ts","business-logic/players/playersSlice.ts","business-logic/players/usePlayers.ts","business-logic/players/connectToChannel.ts","business-logic/game/gameSaga.ts","business-logic/store.ts","services/channel/ChannelCreatorContext.ts","services/channel/ChannelCreatorProvider.tsx","services/channel/ablyChannelCreator.ts","Connection.tsx","views/MainView/useRandomRoomCode.ts","views/GameRoomView/getRoomPath.ts","views/MainView/RoomCodeForm.tsx","services/router/useQuery.ts","views/MainView/NameForm.tsx","components/Page.tsx","views/MainView/MainView.tsx","views/MainView/getMainPath.ts","views/GameRoomView/shared/MyWord/MyWord.tsx","views/GameRoomView/AddDescriptionView/DescriptionForm.tsx","views/GameRoomView/shared/PlayerList/PlayerListItem.tsx","views/GameRoomView/shared/PlayerList/PlayerList.tsx","views/GameRoomView/AddDescriptionView/AddDescriptionView.tsx","views/GameRoomView/AddGuessView/AddGuessView.tsx","views/GameRoomView/RoundSummaryView/PlayerSummary.tsx","views/GameRoomView/RoundSummaryView/RoundSummaryView.tsx","views/GameRoomView/WaitingRoomView/WaitingRoomView.tsx","views/GameRoomView/WaitingRoomView/convertPathToUrl.ts","views/GameRoomView/WaitingRoomView/useStartGame.tsx","views/GameRoomView/NameGuard.tsx","views/GameRoomView/useRoom.ts","views/GameRoomView/RoomGuard.tsx","views/GameRoomView/GameRoomView.tsx","App.tsx","index.tsx","business-logic/game/index.ts","business-logic/me/meSlice.ts","business-logic/useSelector.ts","business-logic/game/Status.ts","business-logic/useDispatch.ts","business-logic/game/useDispatchWithId.ts","business-logic/me/useId.ts","services/localStorage/index.ts","business-logic/game/Player.ts"],"names":["useAddFirstDescription","useDispatchWithId","id","description","addFirstDescriptionToPlayer","useAddFirstGuess","guess","addFirstGuessToPlayer","useAddSecondDescription","addSecondDescriptionToPlayer","useAddSecondGuess","addSecondGuessToPlayer","useMyWord","useSelector","selectMyWord","usePlayers","selectPlayers","useStatus","selectStatus","chooseWordsForPlayers","wordList","numberOfPlayers","result","isEven","push","randomWordlist","sort","Math","random","numberOfWordsToAdd","i","num","QUESTION_MARK","uuid","calculateMyPoints","me","players","teamsByWords","mapObjIndexed","map","player","groupBy","word","getTeamsByWords","points","values","omit","filter","team","hasGuessedTeam","length","countGuessedTeams","isOtherQuestionMark","includes","guesses","flat","countGuessedQuestionMarks","flatMap","countOthersGuessingMe","partner","find","otherPlayers","undefined","TypeError","guessedUs","calculateMyPointsInTeam","curry","firstPlayerId","secondPlayerId","some","initialState","connectedToChannel","status","Status","WaitingForGameStart","waitingForSync","gameSlice","createSlice","name","reducers","requestGameState","state","syncState","newState","payload","joinRoom","joinRoomComplete","leaveRoom","startGame","reducer","ChoosingFirstDescription","prepare","randomWords","index","playerToUpdate","descriptions","every","GuessingFirstTeam","GuessingSecondTeam","ChoosingSecondDescription","forEach","GameOver","startNewRound","playersWithWords","playerWithWord","actions","selectGameState","game","selectId","pointChange","selectConnectedToChannel","selectWaitingForSync","Boolean","window","location","hostname","match","useName","selectName","dispatch","useDispatch","newName","saveToLocalStorage","setNameAction","playersSlice","addOrUpdatePlayer","newPlayer","markPlayerOffline","isOnline","Object","presenceSaga","receivingEventsSaga","connectToChannel","handleAction","sendingEventsSaga","handlePresenceMessage","handleEvent","handleGameEvent","handleRequestGameState","handleSyncGameState","channel","presence","eventChannel","emitter","subscribe","unsubscribe","take","message","fork","events","call","all","action","meta","received","select","myId","publish","data","clientId","put","requestGameStateAction","from","for","Player","event","delay","gameSaga","enterRoomSaga","leaveRoomSaga","roomCode","getContext","createChannel","enterClient","leaveClient","createStore","sagaMiddleware","createSagaMiddleware","context","customizedMiddleware","getDefaultMiddleware","serializableCheck","thunk","store","configureStore","middleware","gameReducer","meReducer","playersReducer","run","ChannelCreatorContext","createContext","ChannelCreatorProvider","children","channelCreator","Provider","value","API_KEY","process","channels","Ably","Realtime","ablyChannelCreator","get","bind","Connection","basename","createRandomRoomCode","createRandomWords","join","getRoomPath","RoomCodeForm","useHistory","randomRoomCode","useState","useRandomRoomCode","roomCodeFromQuery","URLSearchParams","useLocation","search","setRoomCode","onSubmit","preventDefault","style","display","gap","TextField","autoComplete","autoFocus","label","en","MainView","roomCodeLabel","variant","InputProps","endAdornment","InputAdornment","position","Tooltip","title","generateNewRoomCode","IconButton","aria-label","onClick","Cached","readOnly","Button","type","color","createRoom","NameForm","saveName","nameDraft","setNameDraft","nameLabel","onChange","target","Page","Container","Typography","gutterBottom","flexDirection","getMainPath","MyWord","myWord","Card","CardContent","GameRoomView","myWordLabel","aria-labelledby","youReTheQuestionMark","DescriptionForm","onChoose","setDescription","descriptionChosen","setDescriptionChosen","noValidate","disabled","describeYourWord","waitingForOtherPlayers","chooseThisDescription","PlayerListItem","ListItem","ListItemIcon","Wifi","WaitingRoomView","online","WifiOff","offline","ListItemText","primary","secondary","PlayerList","Paper","List","subheader","ListSubheader","playersListHeader","AddDescriptionView","AddFirstDescriptionView","addFirstDescription","AddSecondDescriptionView","addSecondDescription","AddGuessView","setGuess","alreadyGuessed","setAlreadyGuessed","useId","firstGuess","checked","labelId","myFirstGuess","playerId","FormControl","required","component","FormLabel","guessWhoIsInATeam","FormGroup","FormControlLabel","control","Checkbox","AddFirstGuessView","addFirstGuess","AddSecondGuessView","addSecondGuess","PlayerSummary","isMe","RoundSummaryView","words","path","startGameAction","useStartGame","Grid","container","justify","alignItems","item","text","protocol","host","copyInviteLink","needFivePlayers","NameGuard","redirectPath","to","useRoom","useEffect","connecting","RoomGuard","LinearProgress","connectingToRoom","GameRoomRouter","App","params","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","getFromLocalStorage","loadOrCreateId","meSlice","setName","useUntypedSelector","useUntypedDispatch","actionCreator","key","localStorage","setItem","getItem","this"],"mappings":"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","file":"static/js/main.174d0b71.chunk.js","sourcesContent":["import { addFirstDescriptionToPlayer } from \"./gameSlice\";\nimport { useDispatchWithId } from \"./useDispatchWithId\";\n\nexport function useAddFirstDescription() {\n  return useDispatchWithId((id, description: string) =>\n    addFirstDescriptionToPlayer({ description, id })\n  );\n}\n","import { Guess } from \"./Player\";\nimport { addFirstGuessToPlayer } from \"./gameSlice\";\nimport { useDispatchWithId } from \"./useDispatchWithId\";\n\nexport function useAddFirstGuess() {\n  return useDispatchWithId((id, guess: Guess) =>\n    addFirstGuessToPlayer({ guess, id })\n  );\n}\n","import { addSecondDescriptionToPlayer } from \"./gameSlice\";\nimport { useDispatchWithId } from \"./useDispatchWithId\";\n\nexport function useAddSecondDescription() {\n  return useDispatchWithId((id, description: string) =>\n    addSecondDescriptionToPlayer({ description, id })\n  );\n}\n","import { Guess } from \"./Player\";\nimport { addSecondGuessToPlayer } from \"./gameSlice\";\nimport { useDispatchWithId } from \"./useDispatchWithId\";\n\nexport function useAddSecondGuess() {\n  return useDispatchWithId((id, guess: Guess) =>\n    addSecondGuessToPlayer({ guess, id })\n  );\n}\n","import { useSelector } from \"../useSelector\";\nimport { selectMyWord } from \"./gameSlice\";\n\nexport function useMyWord() {\n  return useSelector(selectMyWord);\n}\n","import { useSelector } from \"../useSelector\";\nimport { selectPlayers } from \"./gameSlice\";\n\nexport function usePlayers() {\n  return useSelector(selectPlayers);\n}\n","import { useSelector } from \"../useSelector\";\nimport { selectStatus } from \"./gameSlice\";\n\nexport function useStatus() {\n  return useSelector(selectStatus);\n}\n","export function chooseWordsForPlayers(\n  wordList: string[],\n  numberOfPlayers: number\n) {\n  const result: Array<string | null> = [null];\n  if (isEven(numberOfPlayers)) {\n    result.push(null);\n  }\n\n  const randomWordlist = wordList.sort(() => Math.random() - 0.5);\n\n  const numberOfWordsToAdd = isEven(numberOfPlayers)\n    ? numberOfPlayers - 2\n    : numberOfPlayers - 1;\n  for (let i = 0; i < numberOfWordsToAdd / 2; i++) {\n    result.push(randomWordlist[i], randomWordlist[i]);\n  }\n\n  return result.sort(() => Math.random() - 0.5);\n}\n\nfunction isEven(num: number) {\n  return num % 2 === 0;\n}\n","import { curry, groupBy, mapObjIndexed, omit, values } from \"ramda\";\nimport { v4 as uuid } from \"uuid\";\nimport { Player } from \"./Player\";\n\nconst QUESTION_MARK = \"QUESTION_MARK\" + uuid();\n\nexport function calculateMyPoints(me: Player, players: Player[]) {\n  const teamsByWords = getTeamsByWords(players);\n\n  let points = 0;\n  points += 2 * countGuessedTeams(me, teamsByWords);\n  points -= countGuessedQuestionMarks(me, teamsByWords);\n\n  if (me.word === null) {\n    points += countOthersGuessingMe(me, players);\n  } else {\n    points += calculateMyPointsInTeam(me, players);\n  }\n  return points;\n}\n\nfunction getTeamsByWords(players: Player[]) {\n  return mapObjIndexed(\n    (players) => players.map((player) => player.id),\n    groupBy<Player, string>((player) => player.word ?? QUESTION_MARK, players)\n  );\n}\n\nconst hasGuessedTeam = curry(\n  (firstPlayerId: Player[\"id\"], secondPlayerId: Player[\"id\"], player: Player) =>\n    player.guesses.some(\n      (guess) => guess.includes(firstPlayerId) && guess.includes(secondPlayerId)\n    )\n);\n\nfunction countGuessedTeams(\n  me: Player,\n  teamsByWords: { [id: string]: string[] }\n) {\n  const otherTeams = values(\n    omit([QUESTION_MARK, ...(me.word ? [me.word] : [])], teamsByWords)\n  );\n  return otherTeams.filter((team) => hasGuessedTeam(team[0], team[1], me))\n    .length;\n}\n\nfunction countGuessedQuestionMarks(\n  me: Player,\n  teamsByWords: { [p: string]: string[] }\n) {\n  const isOtherQuestionMark = (id: Player[\"id\"]) =>\n    id !== me.id && teamsByWords[QUESTION_MARK].includes(id);\n  return me.guesses.flat().filter(isOtherQuestionMark).length;\n}\n\nfunction calculateMyPointsInTeam(me: Player, players: Player[]): number {\n  let points = 0;\n  const partner = players.find(\n    (player) => player.word === me.word && player.id !== me.id\n  );\n  const otherPlayers = players.filter((player) => player.word !== me.word);\n  if (partner === undefined) {\n    throw new TypeError(`Cannot find second player with word ${me.word}`);\n  }\n\n  const guessedUs = hasGuessedTeam(me.id, partner.id);\n  if (guessedUs(partner) && guessedUs(me)) {\n    points += 3;\n  }\n\n  points -= otherPlayers.filter(guessedUs).length;\n  return points;\n}\n\nfunction countOthersGuessingMe(me: Player, players: Player[]) {\n  const guessesByOtherPlayers = players\n    .filter((player) => player.id !== me.id)\n    .flatMap((player) => player.guesses);\n  return guessesByOtherPlayers.filter((guess) => guess.includes(me.id)).length;\n}\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { RootState } from \"../store\";\nimport { Guess, Player } from \"./Player\";\nimport { chooseWordsForPlayers } from \"./chooseWordsForPlayers\";\nimport { selectId } from \"../me/meSlice\";\nimport { Status } from \"./Status\";\nimport { calculateMyPoints } from \"./calculateMyPoints\";\nimport { PlayerWithPoints } from \"./PlayerWithPoints\";\n\nexport interface GameState {\n  connectedToChannel: boolean;\n  players: Player[];\n  status: Status;\n  waitingForSync: boolean;\n}\n\nexport const initialState: GameState = {\n  connectedToChannel: false,\n  players: [],\n  status: Status.WaitingForGameStart,\n  waitingForSync: false,\n};\n\ninterface GameConfig {\n  players: Player[];\n  wordList: string[];\n}\n\nconst gameSlice = createSlice({\n  name: \"game\",\n  initialState: initialState,\n  reducers: {\n    requestGameState: (state) => ({ ...state, waitingForSync: true }),\n    syncState: (state, { payload: newState }: PayloadAction<GameState>) => ({\n      ...newState,\n      waitingForSync: false,\n    }),\n    joinRoom: (state, { payload: _roomCode }: PayloadAction<string>) => state,\n    joinRoomComplete: (\n      state,\n      { payload: _roomCode }: PayloadAction<string>\n    ) => ({\n      ...state,\n      connectedToChannel: true,\n    }),\n    leaveRoom: (state) => ({ ...state, connectedToChannel: false }),\n    startGame: {\n      reducer: (state, { payload: players }: PayloadAction<Player[]>) => {\n        return {\n          ...state,\n          players: players.map((player) => ({ ...player, points: 5 })),\n          status: Status.ChoosingFirstDescription,\n        };\n      },\n      prepare: ({ players, wordList }: GameConfig) => {\n        const randomWords = chooseWordsForPlayers(wordList, players.length);\n        return {\n          payload: players.map((player, index) => ({\n            ...player,\n            word: randomWords[index],\n          })),\n        };\n      },\n    },\n    addFirstDescriptionToPlayer: (\n      state,\n      {\n        payload: { description, id },\n      }: PayloadAction<{ description: string; id: Player[\"id\"] }>\n    ) => {\n      const playerToUpdate = state.players.find((player) => player.id === id);\n      if (playerToUpdate === undefined) {\n        return;\n      }\n      playerToUpdate.descriptions[0] = description;\n      if (state.players.every((player) => player.descriptions.length === 1)) {\n        state.status = Status.GuessingFirstTeam;\n      }\n    },\n    addSecondDescriptionToPlayer: (\n      state,\n      {\n        payload: { description, id },\n      }: PayloadAction<{ description: string; id: Player[\"id\"] }>\n    ) => {\n      const playerToUpdate = state.players.find((player) => player.id === id);\n      if (playerToUpdate === undefined) {\n        return;\n      }\n      playerToUpdate.descriptions[1] = description;\n      if (state.players.every((player) => player.descriptions.length === 2)) {\n        state.status = Status.GuessingSecondTeam;\n      }\n    },\n    addFirstGuessToPlayer: (\n      state,\n      {\n        payload: { guess, id },\n      }: PayloadAction<{\n        guess: Guess;\n        id: Player[\"id\"];\n      }>\n    ) => {\n      const playerToUpdate = state.players.find((player) => player.id === id);\n      if (playerToUpdate === undefined) {\n        return;\n      }\n      playerToUpdate.guesses[0] = guess;\n      if (state.players.every((player) => player.guesses.length === 1)) {\n        state.status = Status.ChoosingSecondDescription;\n      }\n    },\n    addSecondGuessToPlayer: (\n      state,\n      {\n        payload: { guess, id },\n      }: PayloadAction<{\n        guess: Guess;\n        id: Player[\"id\"];\n      }>\n    ) => {\n      if (state.status !== Status.GuessingSecondTeam) {\n        return;\n      }\n      const playerToUpdate = state.players.find((player) => player.id === id);\n      if (playerToUpdate === undefined) {\n        return;\n      }\n      playerToUpdate.guesses[1] = guess;\n      if (state.players.every((player) => player.guesses.length === 2)) {\n        state.players.forEach(\n          (player) =>\n            (player.points! += calculateMyPoints(player, state.players))\n        );\n        state.status = Status.GameOver;\n      }\n    },\n    startNewRound: {\n      reducer: (\n        state,\n        {\n          payload: playersWithWords,\n        }: PayloadAction<Pick<Player, \"id\" | \"word\">[]>\n      ) => ({\n        ...state,\n        players: state.players.map((player) => ({\n          ...player,\n          descriptions: [],\n          guesses: [],\n          word: playersWithWords.find(\n            (playerWithWord) => playerWithWord.id === player.id\n          )!.word,\n        })),\n        status: Status.ChoosingFirstDescription,\n      }),\n      prepare: (players: Pick<Player, \"id\">[], wordList: string[]) => {\n        const randomWords = chooseWordsForPlayers(wordList, players.length);\n        return {\n          payload: players.map((player, index) => ({\n            id: player.id,\n            word: randomWords[index],\n          })),\n        };\n      },\n    },\n  },\n});\n\nexport const { reducer } = gameSlice;\n\nexport const {\n  addFirstGuessToPlayer,\n  addSecondGuessToPlayer,\n  addFirstDescriptionToPlayer,\n  addSecondDescriptionToPlayer,\n  joinRoom,\n  leaveRoom,\n  joinRoomComplete,\n  requestGameState,\n  syncState,\n  startGame,\n  startNewRound,\n} = gameSlice.actions;\n\nexport function selectGameState(state: RootState) {\n  return state.game;\n}\n\nexport function selectMyWord(state: RootState) {\n  return selectGameState(state).players.find(\n    (player) => player.id === selectId(state)\n  )?.word;\n}\n\nexport function selectStatus(state: RootState) {\n  return selectGameState(state).status;\n}\n\nexport function selectPlayers(state: RootState): PlayerWithPoints[] {\n  const players = selectGameState(state).players;\n  return players.map((player) => ({\n    ...player,\n    pointChange: calculateMyPoints(player, players),\n  }));\n}\n\nexport function selectConnectedToChannel(state: RootState) {\n  return selectGameState(state).connectedToChannel;\n}\n\nexport function selectWaitingForSync(state: RootState) {\n  return selectGameState(state).waitingForSync;\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === \"[::1]\" ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n            \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker.register(swUrl).then(registration => {\n    registration.onupdatefound = () => {\n      const installingWorker = registration.installing;\n      if (installingWorker == null) {\n        return;\n      }\n      installingWorker.onstatechange = () => {\n        if (installingWorker.state === \"installed\") {\n          if (navigator.serviceWorker.controller) {\n            // At this point, the updated precached content has been fetched,\n            // but the previous service worker will still serve the older\n            // content until all client tabs are closed.\n            console.log(\n              \"New content is available and will be used when all \" +\n              \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n            );\n\n            // Execute callback\n            if (config && config.onUpdate) {\n              config.onUpdate(registration);\n            }\n          } else {\n            // At this point, everything has been precached.\n            // It's the perfect time to display a\n            // \"Content is cached for offline use.\" message.\n            console.log(\"Content is cached for offline use.\");\n\n            // Execute callback\n            if (config && config.onSuccess) {\n              config.onSuccess(registration);\n            }\n          }\n        }\n      };\n    };\n  }).catch(error => {\n    console.error(\"Error during service worker registration:\", error);\n  });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" }\n  }).then(response => {\n    // Ensure service worker exists, and that we really are getting a JS file.\n    const contentType = response.headers.get(\"content-type\");\n    if (\n      response.status === 404 ||\n      (contentType != null && contentType.indexOf(\"javascript\") === -1)\n    ) {\n      // No service worker found. Probably a different app. Reload the page.\n      navigator.serviceWorker.ready.then(registration => {\n        registration.unregister().then(() => {\n          window.location.reload();\n        });\n      });\n    } else {\n      // Service worker found. Proceed as normal.\n      registerValidSW(swUrl, config);\n    }\n  }).catch(() => {\n    console.log(\n      \"No internet connection found. App is running in offline mode.\"\n    );\n  });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    }).catch(error => {\n      console.error(error.message);\n    });\n  }\n}\n","import { useDispatch } from \"../useDispatch\";\nimport { selectName, setName as setNameAction } from \"./meSlice\";\nimport { useSelector } from \"../useSelector\";\nimport { saveToLocalStorage } from \"../../services/localStorage\";\n\nexport function useName() {\n  const name = useSelector(selectName);\n  const dispatch = useDispatch();\n  const setName = (newName: string) => {\n    saveToLocalStorage(\"name\", newName);\n    dispatch(setNameAction(newName));\n  };\n  return [name, setName] as const;\n}\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { RootState } from \"../store\";\nimport { Player } from \"../game\";\n\ntype OtherPlayersState = { [id: string]: Player };\n\nconst initialState: OtherPlayersState = {};\n\nexport const playersSlice = createSlice({\n  name: \"players\",\n  initialState,\n  reducers: {\n    addOrUpdatePlayer: (\n      state,\n      { payload: newPlayer }: PayloadAction<Player>\n    ) => ({\n      ...state,\n      [newPlayer.id]: newPlayer,\n    }),\n    markPlayerOffline: (\n      state,\n      { payload: id }: PayloadAction<Player[\"id\"]>\n    ) => {\n      if (state[id] === undefined) {\n        return;\n      }\n      state[id].isOnline = false;\n    },\n  },\n});\n\nexport const { addOrUpdatePlayer, markPlayerOffline } = playersSlice.actions;\n\nexport const selectPlayers = (state: RootState): Player[] =>\n  Object.values(state.players);\n\nexport const reducer = playersSlice.reducer;\n","import { selectPlayers } from \"./playersSlice\";\nimport { useSelector } from \"../useSelector\";\n\nexport function usePlayers() {\n  return useSelector(selectPlayers);\n}\n","import { Channel } from \"../../services/channel/Channel\";\nimport { Player } from \"../game\";\nimport { Types } from \"ably\";\nimport { addOrUpdatePlayer, markPlayerOffline } from \"./playersSlice\";\nimport { all, call, delay, fork, put, select, take } from \"redux-saga/effects\";\nimport { eventChannel } from \"redux-saga\";\nimport { Action } from \"@reduxjs/toolkit\";\nimport { selectId } from \"../me/meSlice\";\nimport {\n  GameState,\n  requestGameState as requestGameStateAction,\n  selectGameState,\n  selectWaitingForSync,\n  syncState,\n} from \"../game/gameSlice\";\n\nfunction* presenceSaga(channel: Channel) {\n  const presence = eventChannel((emitter) => {\n    const actions: Types.PresenceAction[] = [\"enter\", \"present\", \"leave\"];\n    channel.presence.subscribe(actions, emitter);\n    return () => channel.presence.unsubscribe(actions, emitter);\n  });\n  while (true) {\n    const message: Types.PresenceMessage = yield take(presence);\n    yield fork(handlePresenceMessage, message, channel);\n  }\n}\n\nfunction* receivingEventsSaga(channel: Channel) {\n  const events = eventChannel((emitter) => {\n    channel.subscribe(emitter);\n    return () => channel.unsubscribe(emitter);\n  });\n\n  while (true) {\n    const message: Types.Message = yield take(events);\n    yield call(handleEvent, message, channel);\n  }\n}\n\nexport function* connectToChannel(channel: Channel) {\n  yield all([\n    receivingEventsSaga(channel),\n    presenceSaga(channel),\n    sendingEventsSaga(channel),\n  ]);\n}\n\nexport function* handleAction(\n  action: Action<unknown> & { meta?: { received?: boolean } },\n  channel: Channel\n) {\n  if (action.meta?.received) {\n    return;\n  }\n  const myId: string = yield select(selectId);\n  channel.publish({\n    name: \"gameEvent\",\n    data: { ...action, meta: { clientId: myId } },\n  });\n}\n\nexport function* sendingEventsSaga(channel: Channel) {\n  while (true) {\n    const action: Action & { received?: boolean } = yield take();\n    yield handleAction(action, channel);\n  }\n}\n\nfunction* requestGameState(channel: Channel, message: Types.PresenceMessage) {\n  const myId: string = yield select(selectId);\n  const waitingForSync: boolean = yield select(selectWaitingForSync);\n  if (waitingForSync) {\n    return;\n  }\n  yield put(requestGameStateAction());\n  channel.publish({\n    name: \"requestGameState\",\n    data: { from: message.clientId, for: myId },\n  });\n}\n\nexport function* handlePresenceMessage(\n  message: Types.PresenceMessage,\n  channel: Channel\n) {\n  if ([\"enter\", \"present\"].includes(message.action)) {\n    yield put({\n      ...addOrUpdatePlayer(\n        new Player({\n          id: message.clientId,\n          name: message.data.name,\n          isOnline: true,\n        })\n      ),\n      meta: {\n        received: true,\n      },\n    });\n  }\n  if ([\"present\"].includes(message.action)) {\n    yield requestGameState(channel, message);\n  }\n  if ([\"leave\"].includes(message.action)) {\n    yield put({\n      ...markPlayerOffline(message.clientId),\n      meta: {\n        received: true,\n      },\n    });\n  }\n}\n\nexport function* handleEvent(event: Types.Message, channel: Channel) {\n  switch (event.name) {\n    case \"gameEvent\":\n      yield handleGameEvent(event);\n      return;\n    case \"requestGameState\":\n      yield handleRequestGameState(event, channel);\n      return;\n    case \"syncGameState\":\n      yield handleSyncGameState(event);\n      return;\n  }\n}\n\nfunction* handleGameEvent(event: Types.Message) {\n  const myId: string = yield select(selectId);\n  const action = event.data;\n  if (action?.meta?.clientId !== myId) {\n    yield put({\n      ...action,\n      meta: {\n        ...action.meta,\n        received: true,\n      },\n    });\n  }\n}\n\nfunction* handleRequestGameState(event: Types.Message, channel: Channel) {\n  const myId: string = yield select(selectId);\n  if (event.data.from !== myId) {\n    return;\n  }\n  yield delay(500);\n  const state: GameState = yield select(selectGameState);\n  channel.publish({\n    name: \"syncGameState\",\n    data: { state, for: event.data.for },\n  });\n}\n\nfunction* handleSyncGameState(event: Types.Message) {\n  const myId: string = yield select(selectId);\n  if (event.data.for !== myId) {\n    return;\n  }\n\n  yield put({ ...syncState(event.data.state), meta: { received: true } });\n}\n","import { call, fork, getContext, select, take } from \"redux-saga/effects\";\nimport { selectId, selectName } from \"../me/meSlice\";\nimport { ChannelCreator } from \"../../services/channel/ChannelCreator\";\nimport { joinRoom, joinRoomComplete, leaveRoom } from \"./gameSlice\";\nimport { Channel } from \"../../services/channel/Channel\";\nimport { connectToChannel } from \"../players/connectToChannel\";\nimport { put } from \"redux-saga-test-plan/matchers\";\n\nexport function* gameSaga() {\n  yield call(presenceSaga);\n}\n\nfunction* presenceSaga() {\n  while (true) {\n    const { payload: roomCode } = yield take(joinRoom);\n    const createChannel: ChannelCreator = yield getContext(\"createChannel\");\n    const channel = createChannel(roomCode);\n    yield fork(enterRoomSaga, channel, roomCode);\n    yield take(leaveRoom);\n    yield fork(leaveRoomSaga, channel);\n  }\n}\n\nfunction* enterRoomSaga(channel: Channel, roomCode: string) {\n  const id: string = yield select(selectId);\n  const name: string = yield select(selectName);\n  yield fork(connectToChannel, channel);\n  yield channel.presence.enterClient(id, { name });\n  yield put(joinRoomComplete(roomCode));\n}\n\nfunction* leaveRoomSaga(channel: Channel) {\n  const id: string = yield select(selectId);\n  channel.presence.leaveClient(id);\n}\n","import { configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\";\nimport { reducer as meReducer } from \"./me/\";\nimport { reducer as playersReducer } from \"./players\";\nimport { reducer as gameReducer } from \"./game\";\nimport createSagaMiddleware from \"redux-saga\";\nimport { gameSaga } from \"./game/gameSaga\";\nimport { ChannelCreator } from \"../services/channel/ChannelCreator\";\n\nexport function createStore(createChannel: ChannelCreator) {\n  const sagaMiddleware = createSagaMiddleware({ context: { createChannel } });\n\n  const customizedMiddleware = [\n    ...getDefaultMiddleware({\n      serializableCheck: false,\n      thunk: false,\n    }),\n    sagaMiddleware,\n  ];\n  const store = configureStore({\n    middleware: customizedMiddleware,\n    reducer: {\n      game: gameReducer,\n      me: meReducer,\n      players: playersReducer,\n    },\n  });\n  sagaMiddleware.run(gameSaga);\n  return store;\n}\n\nexport type Store = ReturnType<typeof createStore>;\nexport type RootState = ReturnType<Store[\"getState\"]>;\n","import { createContext } from \"react\";\nimport { ChannelCreator } from \"./ChannelCreator\";\n\nexport const ChannelCreatorContext = createContext<ChannelCreator>(\n  (undefined as unknown) as ChannelCreator\n);\n","import React, { FunctionComponent } from \"react\";\nimport { ChannelCreatorContext } from \"./ChannelCreatorContext\";\nimport { ChannelCreator } from \"./ChannelCreator\";\n\ninterface Props {\n  channelCreator: ChannelCreator;\n}\n\nexport const ChannelCreatorProvider: FunctionComponent<Props> = ({\n  children,\n  channelCreator,\n}) => (\n  <ChannelCreatorContext.Provider value={channelCreator}>\n    {children}\n  </ChannelCreatorContext.Provider>\n);\n","import Ably from \"ably/promises\";\nimport { ChannelCreator } from \"./ChannelCreator\";\n\nconst API_KEY: unknown = process.env.REACT_APP_ABLY_API_KEY;\n\nif (typeof API_KEY !== \"string\" || API_KEY === \"\") {\n  throw new TypeError(\"No Ably API key set in env var REACT_APP_ABLY_API_KEY\");\n}\n\nconst channels = new Ably.Realtime(API_KEY).channels;\nexport const ablyChannelCreator: ChannelCreator = channels.get.bind(channels);\n","import { BrowserRouter } from \"./services/router\";\nimport { Provider } from \"react-redux\";\nimport { createStore } from \"./business-logic/store\";\nimport React, { ReactNode } from \"react\";\nimport { ChannelCreatorProvider } from \"./services/channel/ChannelCreatorProvider\";\nimport { ablyChannelCreator } from \"./services/channel/ablyChannelCreator\";\n\ninterface Props {\n  children: ReactNode;\n}\n\nexport const Connection = ({ children }: Props) => (\n  <ChannelCreatorProvider channelCreator={ablyChannelCreator}>\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n      <Provider store={createStore(ablyChannelCreator)}>{children}</Provider>\n    </BrowserRouter>\n  </ChannelCreatorProvider>\n);\n","import { useState } from \"react\";\nimport createRandomWords from \"random-words\";\n\nexport function createRandomRoomCode() {\n  return (createRandomWords(3) as string[]).join(\"-\");\n}\n\nexport function useRandomRoomCode() {\n  const [roomCode] = useState(() => createRandomRoomCode());\n  return roomCode;\n}\n","export function getRoomPath(roomCode: string) {\n  return `/room/${roomCode}`;\n}\n","import { createRandomRoomCode, useRandomRoomCode } from \"./useRandomRoomCode\";\nimport { useHistory, useQuery } from \"../../services/router\";\nimport { getRoomPath } from \"../GameRoomView/getRoomPath\";\nimport { en } from \"../../services/locale\";\nimport React, { useState } from \"react\";\nimport {\n  Button,\n  IconButton,\n  InputAdornment,\n  TextField,\n  Tooltip,\n} from \"@material-ui/core\";\nimport { Cached } from \"@material-ui/icons\";\n\nexport function RoomCodeForm() {\n  const { push } = useHistory();\n  const randomRoomCode = useRandomRoomCode();\n  const query = useQuery();\n\n  const roomCodeFromQuery = query.get(\"roomCode\");\n  const [roomCode, setRoomCode] = useState(roomCodeFromQuery ?? randomRoomCode);\n\n  return (\n    <form\n      onSubmit={(event) => {\n        event.preventDefault();\n        push(getRoomPath(roomCode));\n      }}\n      style={{\n        display: \"flex\",\n        gap: 12,\n      }}\n    >\n      <TextField\n        autoComplete=\"off\"\n        autoFocus\n        id={\"roomCode\"}\n        label={en.MainView.roomCodeLabel}\n        value={roomCode}\n        variant=\"standard\"\n        InputProps={{\n          endAdornment: (\n            <InputAdornment position=\"end\">\n              <Tooltip title={en.MainView.generateNewRoomCode}>\n                <IconButton\n                  aria-label={en.MainView.generateNewRoomCode}\n                  onClick={() => setRoomCode(createRandomRoomCode())}\n                >\n                  <Cached />\n                </IconButton>\n              </Tooltip>\n            </InputAdornment>\n          ),\n          readOnly: true,\n        }}\n      />\n      <Button type=\"submit\" variant=\"contained\" color=\"primary\">\n        {roomCodeFromQuery ? en.MainView.joinRoom : en.MainView.createRoom}\n      </Button>\n    </form>\n  );\n}\n","import { useLocation } from \"react-router-dom\";\n\nexport function useQuery() {\n  return new URLSearchParams(useLocation().search);\n}\n","import { en } from \"../../services/locale\";\nimport React, { useState } from \"react\";\nimport { useName } from \"../../business-logic/me\";\nimport { Button, TextField } from \"@material-ui/core\";\n\nexport function NameForm() {\n  const [name, saveName] = useName();\n  const [nameDraft, setNameDraft] = useState(name ?? \"\");\n  return (\n    <form\n      onSubmit={(event) => {\n        event.preventDefault();\n        saveName(nameDraft);\n      }}\n      style={{\n        display: \"flex\",\n        gap: 12,\n      }}\n    >\n      <TextField\n        autoComplete=\"off\"\n        id={\"name\"}\n        label={en.MainView.nameLabel}\n        value={nameDraft}\n        variant=\"filled\"\n        onChange={(event) => setNameDraft(event.target.value)}\n      />\n      <Button type=\"submit\" variant=\"contained\" color=\"primary\">\n        {en.MainView.saveName}\n      </Button>\n    </form>\n  );\n}\n","import React, { FunctionComponent } from \"react\";\nimport { Container, Typography } from \"@material-ui/core\";\n\ninterface Props {\n  title?: string;\n}\n\nexport const Page: FunctionComponent<Props> = ({ children, title }) => (\n  <Container>\n    {title && (\n      <Typography variant=\"h3\" gutterBottom>\n        {title}\n      </Typography>\n    )}\n    <div\n      style={{\n        display: \"flex\",\n        flexDirection: \"column\",\n        gap: 12,\n      }}\n    >\n      {children}\n    </div>\n  </Container>\n);\n","import React from \"react\";\nimport { RoomCodeForm } from \"./RoomCodeForm\";\nimport { NameForm } from \"./NameForm\";\nimport { useName } from \"../../business-logic/me\";\nimport { Page } from \"../../components/Page\";\nimport { en } from \"../../services/locale\";\n\nexport function MainView() {\n  const [name] = useName();\n  return (\n    <Page title={en.MainView.title}>\n      <NameForm />\n      {name && <RoomCodeForm />}\n    </Page>\n  );\n}\n","export function getMainPath(roomCode?: string) {\n  if (roomCode === undefined) {\n    return \"/\";\n  }\n  return `/?roomCode=${roomCode}`;\n}\n","import { Card, CardContent, Typography } from \"@material-ui/core\";\nimport { en } from \"../../../../services/locale\";\nimport React from \"react\";\nimport { useMyWord } from \"../../../../business-logic/game\";\n\nexport function MyWord() {\n  const myWord = useMyWord();\n\n  const id = \"my-word-label\";\n  return (\n    <Card>\n      <CardContent>\n        <Typography gutterBottom id={id}>\n          {en.GameRoomView.myWordLabel}\n        </Typography>\n        <Typography aria-labelledby={id}>\n          {myWord ?? en.GameRoomView.youReTheQuestionMark}\n        </Typography>\n      </CardContent>\n    </Card>\n  );\n}\n","import React, { useState } from \"react\";\nimport { Button, TextField } from \"@material-ui/core\";\nimport { en } from \"../../../services/locale\";\n\nexport interface Props {\n  onChoose: (description: string) => void;\n}\n\nexport function DescriptionForm({ onChoose }: Props) {\n  const [description, setDescription] = useState(\"\");\n  const [descriptionChosen, setDescriptionChosen] = useState(false);\n  return (\n    <form\n      noValidate\n      onSubmit={(event) => {\n        event.preventDefault();\n        onChoose(description);\n        setDescriptionChosen(true);\n      }}\n      style={{\n        display: \"flex\",\n        gap: 12,\n      }}\n    >\n      <TextField\n        disabled={descriptionChosen}\n        id=\"description\"\n        label={en.GameRoomView.describeYourWord}\n        value={description}\n        variant=\"filled\"\n        onChange={(event) => setDescription(event.target.value)}\n      />\n      <Button\n        disabled={descriptionChosen}\n        type=\"submit\"\n        variant=\"contained\"\n        color=\"primary\"\n      >\n        {descriptionChosen\n          ? en.GameRoomView.waitingForOtherPlayers\n          : en.GameRoomView.chooseThisDescription}\n      </Button>\n    </form>\n  );\n}\n","import { ListItem, ListItemIcon, ListItemText } from \"@material-ui/core\";\nimport { Wifi, WifiOff } from \"@material-ui/icons\";\nimport { en } from \"../../../../services/locale\";\nimport React, { FunctionComponent } from \"react\";\nimport { Player } from \"../../../../business-logic/game\";\n\ninterface Props {\n  player: Player;\n}\n\nexport const PlayerListItem: FunctionComponent<Props> = ({\n  player: { descriptions, name, isOnline },\n}) => {\n  return (\n    <ListItem>\n      <ListItemIcon>\n        {isOnline ? (\n          <Wifi aria-label={en.WaitingRoomView.online} />\n        ) : (\n          <WifiOff aria-label={en.WaitingRoomView.offline} color=\"error\" />\n        )}\n      </ListItemIcon>\n      <ListItemText\n        primary={name}\n        secondary={descriptions.length > 0 && descriptions.join(\", \")}\n      />\n    </ListItem>\n  );\n};\n","import { Player } from \"../../../../business-logic/game\";\nimport { List, ListSubheader, Paper } from \"@material-ui/core\";\nimport { en } from \"../../../../services/locale\";\nimport { PlayerListItem } from \"./PlayerListItem\";\nimport React from \"react\";\n\nexport interface Props {\n  players: Player[];\n}\n\nexport function PlayerList({ players }: Props) {\n  return (\n    <Paper>\n      <List\n        subheader={\n          <ListSubheader>{en.WaitingRoomView.playersListHeader}</ListSubheader>\n        }\n      >\n        {players.map((player) => (\n          <PlayerListItem key={player.name} player={player} />\n        ))}\n      </List>\n    </Paper>\n  );\n}\n","import React from \"react\";\nimport {\n  useAddFirstDescription,\n  useAddSecondDescription,\n  usePlayers,\n} from \"../../../business-logic/game\";\nimport { MyWord } from \"../shared/MyWord/MyWord\";\nimport { DescriptionForm } from \"./DescriptionForm\";\nimport { PlayerList } from \"../shared/PlayerList/PlayerList\";\nimport { en } from \"../../../services/locale\";\nimport { Page } from \"../../../components/Page\";\n\nexport interface Props {\n  onChoose: (description: string) => void;\n}\n\nexport function AddDescriptionView({ onChoose }: Props) {\n  const players = usePlayers();\n  return (\n    <Page title={en.GameRoomView.title}>\n      <PlayerList players={players} />\n      <MyWord />\n      <DescriptionForm onChoose={onChoose} />\n    </Page>\n  );\n}\n\nexport function AddFirstDescriptionView() {\n  const addFirstDescription = useAddFirstDescription();\n  return <AddDescriptionView onChoose={addFirstDescription} />;\n}\n\nexport function AddSecondDescriptionView() {\n  const addSecondDescription = useAddSecondDescription();\n  return <AddDescriptionView onChoose={addSecondDescription} />;\n}\n","import React, { ChangeEvent, useState } from \"react\";\nimport {\n  Button,\n  Card,\n  CardContent,\n  Checkbox,\n  FormControl,\n  FormControlLabel,\n  FormGroup,\n  FormLabel,\n  Typography,\n} from \"@material-ui/core\";\nimport {\n  Guess,\n  Player,\n  useAddFirstGuess,\n  useAddSecondGuess,\n  usePlayers,\n} from \"../../../business-logic/game\";\nimport { MyWord } from \"../shared/MyWord/MyWord\";\nimport { PlayerList } from \"../shared/PlayerList/PlayerList\";\nimport { en } from \"../../../services/locale\";\nimport { Page } from \"../../../components/Page\";\nimport { useId } from \"../../../business-logic/me/useId\";\n\nexport function AddGuessView({\n  onChoose,\n}: {\n  onChoose: (guess: Guess) => void;\n}) {\n  const [guess, setGuess] = useState<Player[\"id\"][]>([]);\n  const [alreadyGuessed, setAlreadyGuessed] = useState(false);\n  const players = usePlayers();\n  const id = useId();\n  const firstGuess: Guess | undefined = players.find(\n    (player) => player.id === id\n  )!.guesses[0];\n  const onChange = (event: ChangeEvent<HTMLInputElement>, checked: boolean) =>\n    checked\n      ? setGuess((guess) => [...guess, event.target.name])\n      : setGuess((guess) => guess.filter((id) => id !== event.target.name));\n  const labelId = \"my-first-guess-label\";\n  return (\n    <Page title={en.GameRoomView.title}>\n      <PlayerList players={players} />\n      <MyWord />\n      {firstGuess && (\n        <Card>\n          <CardContent>\n            <Typography gutterBottom id={labelId}>\n              {en.GameRoomView.myFirstGuess}\n            </Typography>\n            <Typography aria-labelledby={labelId}>\n              {firstGuess\n                .map(\n                  (playerId) =>\n                    players.find((player) => player.id === playerId)!.name\n                )\n                .join(\", \")}\n            </Typography>\n          </CardContent>\n        </Card>\n      )}\n      <form\n        noValidate\n        onSubmit={(event) => {\n          event.preventDefault();\n          if (guess.length !== 2) return;\n          onChoose(guess as Guess);\n          setAlreadyGuessed(true);\n        }}\n        style={{ display: \"flex\", flexDirection: \"column\" }}\n      >\n        <FormControl required component=\"fieldset\">\n          <FormLabel component=\"legend\">\n            {en.GameRoomView.guessWhoIsInATeam}\n          </FormLabel>\n          <FormGroup>\n            {players.map((player) => (\n              <FormControlLabel\n                control={\n                  <Checkbox\n                    checked={guess.includes(player.id)}\n                    disabled={alreadyGuessed}\n                    onChange={onChange}\n                    name={player.id}\n                  />\n                }\n                key={player.id}\n                label={player.name}\n              />\n            ))}\n          </FormGroup>\n        </FormControl>\n        <Button\n          type=\"submit\"\n          disabled={guess.length !== 2 || alreadyGuessed}\n          variant=\"contained\"\n          color=\"primary\"\n        >\n          {alreadyGuessed\n            ? en.GameRoomView.waitingForOtherPlayers\n            : en.GameRoomView.guess}\n        </Button>\n      </form>\n    </Page>\n  );\n}\n\nexport function AddFirstGuessView() {\n  const addFirstGuess = useAddFirstGuess();\n  return <AddGuessView onChoose={addFirstGuess} />;\n}\n\nexport function AddSecondGuessView() {\n  const addSecondGuess = useAddSecondGuess();\n  return <AddGuessView onChoose={addSecondGuess} />;\n}\n","import React, { FunctionComponent } from \"react\";\nimport { PlayerWithPoints } from \"../../../business-logic/game\";\nimport { Card, CardContent, Typography } from \"@material-ui/core\";\n\nexport interface Props {\n  player: PlayerWithPoints;\n  players: Pick<PlayerWithPoints, \"id\" | \"name\">[];\n  isMe?: boolean;\n}\n\nexport const PlayerSummary: FunctionComponent<Props> = ({\n  player,\n  players,\n  isMe = false,\n}) => (\n  <Card>\n    <CardContent>\n      <Typography\n        gutterBottom={!isMe}\n        variant=\"h3\"\n        color={isMe ? \"primary\" : \"initial\"}\n      >\n        {player.name}\n      </Typography>\n      {isMe && (\n        <Typography variant=\"subtitle1\" gutterBottom>\n          Das bist du\n        </Typography>\n      )}\n      <dl>\n        <dt>Wort</dt>\n        <dd>{player.word === null ? \"Fragezeichen\" : player.word}</dd>\n\n        <dt>Beschreibungen</dt>\n        <dd>{player.descriptions.join(\", \")}</dd>\n\n        <dt>Erste Vermutung</dt>\n        <dd>\n          {player.guesses[0]\n            .map((id) => players.find((player) => player.id === id)!.name)\n            .join(\", \")}\n        </dd>\n\n        <dt>Zweite Vermutung</dt>\n        <dd>\n          {player.guesses[1]\n            .map((id) => players.find((player) => player.id === id)!.name)\n            .join(\", \")}\n        </dd>\n\n        <dt>Punkte</dt>\n        <dd>\n          {player.points} ({player.pointChange > 0 ? \"+\" : \"\"}\n          {player.pointChange})\n        </dd>\n      </dl>\n    </CardContent>\n  </Card>\n);\n","import React, { FunctionComponent } from \"react\";\nimport { usePlayers } from \"../../../business-logic/game\";\nimport { MyWord } from \"../shared/MyWord/MyWord\";\nimport { en } from \"../../../services/locale\";\nimport { Page } from \"../../../components/Page\";\nimport { PlayerSummary } from \"./PlayerSummary\";\nimport { Button } from \"@material-ui/core\";\nimport { useDispatch } from \"../../../business-logic/useDispatch\";\nimport { startNewRound } from \"../../../business-logic/game/gameSlice\";\nimport words from \"../../../wordLists/german.json\";\nimport { useId } from \"../../../business-logic/me/useId\";\n\nexport const RoundSummaryView: FunctionComponent = () => {\n  const players = usePlayers();\n  const myId = useId();\n  const dispatch = useDispatch();\n  const startNextRound = () => dispatch(startNewRound(players, words));\n  return (\n    <Page title={en.GameRoomView.title}>\n      <MyWord />\n      {players.map((player) => (\n        <PlayerSummary\n          player={player}\n          players={players}\n          isMe={player.id === myId}\n        />\n      ))}\n\n      <Button variant=\"contained\" color=\"primary\" onClick={startNextRound}>\n        Nächste Runde\n      </Button>\n    </Page>\n  );\n};\n","import React, { FunctionComponent } from \"react\";\nimport { Button, Grid, Typography } from \"@material-ui/core\";\nimport { CopyToClipboard } from \"react-copy-to-clipboard\";\nimport { en } from \"../../../services/locale\";\nimport { usePlayers } from \"../../../business-logic/players\";\nimport { convertPathToUrl } from \"./convertPathToUrl\";\nimport { useStartGame } from \"./useStartGame\";\nimport { PlayerList } from \"../shared/PlayerList/PlayerList\";\nimport { Page } from \"../../../components/Page\";\nimport { getRoomPath } from \"../getRoomPath\";\n\ninterface Props {\n  roomCode: string;\n}\n\nexport const WaitingRoomView: FunctionComponent<Props> = ({ roomCode }) => {\n  const startGame = useStartGame();\n\n  const players = usePlayers();\n  return (\n    <Page>\n      <Grid container justify=\"space-between\" alignItems=\"center\">\n        <Grid item>\n          <Typography variant=\"h3\" gutterBottom>\n            {en.WaitingRoomView.title}\n          </Typography>\n        </Grid>\n        <Grid item>\n          <CopyToClipboard text={convertPathToUrl(getRoomPath(roomCode))}>\n            <Button variant=\"contained\" color=\"primary\">\n              {en.WaitingRoomView.copyInviteLink}\n            </Button>\n          </CopyToClipboard>\n        </Grid>\n      </Grid>\n      <PlayerList players={players} />\n      <Button\n        onClick={startGame}\n        variant=\"contained\"\n        color=\"primary\"\n        disabled={players.length < 5}\n      >\n        {players.length < 5\n          ? en.WaitingRoomView.needFivePlayers\n          : en.WaitingRoomView.startGame}\n      </Button>\n    </Page>\n  );\n};\n","export function convertPathToUrl(path: string) {\n  return `${window.location.protocol}//${window.location.host}${process.env.PUBLIC_URL}${path}`;\n}\n","import { usePlayers } from \"../../../business-logic/players\";\nimport { useDispatch } from \"../../../business-logic/useDispatch\";\nimport { startGame as startGameAction } from \"../../../business-logic/game/gameSlice\";\nimport words from \"../../../wordLists/german.json\";\n\nexport function useStartGame() {\n  const players = usePlayers();\n  const dispatch = useDispatch();\n\n  return function startGame() {\n    dispatch(\n      startGameAction({\n        players,\n        wordList: words,\n      })\n    );\n  };\n}\n","import { useName } from \"../../business-logic/me\";\nimport { Redirect } from \"../../services/router\";\nimport React, { ReactNode } from \"react\";\n\ninterface Props {\n  children?: ReactNode;\n  redirectPath: string;\n}\n\nexport function NameGuard({ children, redirectPath }: Props) {\n  const [myName] = useName();\n\n  if (myName === null) {\n    return <Redirect to={redirectPath} />;\n  }\n\n  return <>{children}</>;\n}\n","import { useEffect } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport {\n  joinRoom,\n  leaveRoom,\n  selectConnectedToChannel,\n} from \"../../business-logic/game/gameSlice\";\nimport { useSelector } from \"../../business-logic/useSelector\";\n\nexport function useRoom(roomCode: string) {\n  const dispatch = useDispatch();\n  const connectedToChannel = useSelector(selectConnectedToChannel);\n  useEffect(() => {\n    dispatch(joinRoom(roomCode));\n    return () => {\n      dispatch(leaveRoom());\n    };\n  }, [dispatch, roomCode]);\n\n  return { connecting: !connectedToChannel };\n}\n","import React, { ReactNode } from \"react\";\nimport { useRoom } from \"./useRoom\";\nimport { LinearProgress, Typography } from \"@material-ui/core\";\nimport { en } from \"../../services/locale\";\nimport { Page } from \"../../components/Page\";\n\ninterface Props {\n  children?: ReactNode;\n  roomCode: string;\n}\n\nexport function RoomGuard({ children, roomCode }: Props) {\n  const { connecting } = useRoom(roomCode);\n  if (connecting)\n    return (\n      <Page>\n        <LinearProgress />\n        <Typography>{en.WaitingRoomView.connectingToRoom}</Typography>\n      </Page>\n    );\n  return <>{children}</>;\n}\n","import React, { FunctionComponent } from \"react\";\nimport { Status, useStatus } from \"../../business-logic/game\";\nimport {\n  AddFirstDescriptionView,\n  AddSecondDescriptionView,\n} from \"./AddDescriptionView/AddDescriptionView\";\nimport {\n  AddFirstGuessView,\n  AddSecondGuessView,\n} from \"./AddGuessView/AddGuessView\";\nimport { RoundSummaryView } from \"./RoundSummaryView/RoundSummaryView\";\nimport { WaitingRoomView } from \"./WaitingRoomView/WaitingRoomView\";\nimport { NameGuard } from \"./NameGuard\";\nimport { getMainPath } from \"../MainView/getMainPath\";\nimport { useRoom } from \"./useRoom\";\nimport { RoomGuard } from \"./RoomGuard\";\n\ninterface Props {\n  roomCode: string;\n}\n\nexport const GameRoomView: FunctionComponent<Props> = ({ roomCode }: Props) => {\n  return (\n    <NameGuard redirectPath={getMainPath(roomCode)}>\n      <RoomGuard roomCode={roomCode}>\n        <GameRoomRouter roomCode={roomCode} />\n      </RoomGuard>\n    </NameGuard>\n  );\n};\n\nfunction GameRoomRouter({ roomCode }: Props) {\n  useRoom(roomCode);\n  const status = useStatus();\n\n  switch (status) {\n    case Status.WaitingForGameStart:\n      return <WaitingRoomView roomCode={roomCode} />;\n    case Status.ChoosingFirstDescription:\n      return <AddFirstDescriptionView />;\n    case Status.GuessingFirstTeam:\n      return <AddFirstGuessView />;\n    case Status.ChoosingSecondDescription:\n      return <AddSecondDescriptionView />;\n    case Status.GuessingSecondTeam:\n      return <AddSecondGuessView />;\n    case Status.GameOver:\n      return <RoundSummaryView />;\n  }\n}\n","import React from \"react\";\nimport { MainView } from \"./views/MainView/MainView\";\nimport \"fontsource-roboto\";\nimport { Route, Switch } from \"./services/router\";\nimport { getRoomPath } from \"./views/GameRoomView/getRoomPath\";\nimport { getMainPath } from \"./views/MainView/getMainPath\";\nimport { GameRoomView } from \"./views/GameRoomView/GameRoomView\";\n\nexport function App() {\n  return (\n    <Switch>\n      <Route path={getRoomPath(\":roomCode\")}>\n        {({ match }) => <GameRoomView roomCode={match!.params.roomCode!} />}\n      </Route>\n      <Route path={getMainPath()}>\n        <MainView />\n      </Route>\n    </Switch>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Connection } from \"./Connection\";\nimport { App } from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Connection>\n      <App />\n    </Connection>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","export { reducer } from \"./gameSlice\";\n\nexport { MockPlayer } from \"./MockPlayer\";\nexport * from \"./Player\";\nexport * from \"./PlayerWithPoints\";\nexport * from \"./Status\";\n\nexport { useAddFirstDescription } from \"./useAddFirstDescription\";\nexport { useAddFirstGuess } from \"./useAddFirstGuess\";\nexport { useAddSecondDescription } from \"./useAddSecondDescription\";\nexport { useAddSecondGuess } from \"./useAddSecondGuess\";\nexport { useMyWord } from \"./useMyWord\";\nexport { usePlayers } from \"./usePlayers\";\nexport { useStatus } from \"./useStatus\";\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { v4 as uuid } from \"uuid\";\nimport { RootState } from \"../store\";\nimport {\n  getFromLocalStorage,\n  saveToLocalStorage,\n} from \"../../services/localStorage\";\n\ntype MeState = {\n  id: string;\n  name: string | null;\n};\n\nfunction loadOrCreateId() {\n  return getFromLocalStorage(\"id\") ?? saveToLocalStorage(\"id\", uuid());\n}\n\nconst initialState: MeState = {\n  id: loadOrCreateId(),\n  name: getFromLocalStorage(\"name\"),\n};\n\nexport const meSlice = createSlice({\n  name: \"me\",\n  initialState,\n  reducers: {\n    setName: (state, action: PayloadAction<string>) => ({\n      ...state,\n      name: action.payload,\n    }),\n  },\n});\n\nexport const selectName = (state: RootState) => state.me.name;\nexport const selectId = (state: RootState) => state.me.id;\n\nexport const { setName } = meSlice.actions;\n\nexport const reducer = meSlice.reducer;\n","import {\n  TypedUseSelectorHook,\n  useSelector as useUntypedSelector,\n} from \"react-redux\";\nimport { RootState } from \"./store\";\n\nexport const useSelector: TypedUseSelectorHook<RootState> = useUntypedSelector;\n","export enum Status {\n  WaitingForGameStart = \"WaitingForGameStart\",\n  ChoosingFirstDescription = \"ChoosingFirstDescription\",\n  GuessingFirstTeam = \"GuessingFirstTeam\",\n  ChoosingSecondDescription = \"ChoosingSecondDescription\",\n  GuessingSecondTeam = \"GuessingSecondTeam\",\n  GameOver = \"GameOver\",\n}\n","import { useDispatch as useUntypedDispatch } from \"react-redux\";\nimport { Store } from \"./store\";\n\nexport const useDispatch = () => useUntypedDispatch<Store[\"dispatch\"]>();\n","import { Player } from \"./Player\";\nimport { PayloadAction } from \"@reduxjs/toolkit\";\nimport { useId } from \"../me/useId\";\nimport { useDispatch } from \"../useDispatch\";\n\nexport function useDispatchWithId<Value>(\n  actionCreator: (id: Player[\"id\"], value: Value) => PayloadAction<unknown>\n) {\n  const id = useId();\n  const dispatch = useDispatch();\n\n  function dispatchAction(value: Value) {\n    dispatch(actionCreator(id, value));\n  }\n\n  return dispatchAction;\n}\n","import { selectId } from \"./meSlice\";\nimport { useSelector } from \"../useSelector\";\n\nexport function useId() {\n  return useSelector(selectId);\n}\n","export function saveToLocalStorage(key: string, value: string): string {\n  localStorage.setItem(`qnot/${key}`, value);\n  return value;\n}\n\nexport function getFromLocalStorage(key: string): string | null {\n  return localStorage.getItem(`qnot/${key}`) ?? null;\n}\n","import { v4 as uuid } from \"uuid\";\nimport { Optional } from \"utility-types\";\n\nexport type Guess = [Player[\"id\"], Player[\"id\"]];\n\nexport class Player {\n  id: string;\n  name: string;\n  isOnline: boolean;\n  word?: string | null;\n  points?: number;\n  descriptions: string[] = [];\n  guesses: Guess[] = [];\n\n  constructor({\n    id = uuid(),\n    name,\n    isOnline,\n    word,\n  }: Optional<Player, \"id\" | \"descriptions\" | \"guesses\">) {\n    this.name = name;\n    this.isOnline = isOnline;\n    this.id = id;\n    this.word = word;\n  }\n}\n"],"sourceRoot":""}